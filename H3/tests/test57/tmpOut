make[1]: Entering directory '/home/hwo2853/LLVM/H3/tests/test57'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc

loopBlocks
loopToBlock ****

constant----
0x7323880endconstant
  call void @CAT_set(i8* noundef %0, i64 noundef 5) #4  call void @CAT_set(i8* noundef %0, i64 noundef 5) #4
constantatm  call void @CAT_set(i8* noundef %0, i64 noundef 5) #4
deleted
  call void @CAT_set(i8* noundef %0, i64 noundef 5) #4

endofblockkilling:  call void @CAT_set(i8* noundef %0, i64 noundef 5) #4

BLOCK AFTER MODIFICATION

  %3 = call i64 @CAT_get(i8* noundef %0) #4
  %4 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %3)
  %5 = call i64 @CAT_get(i8* noundef %1) #4
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %5)
  %7 = call i32 @rand() #5
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i8* %1, i8* %0
  %10 = call i64 @CAT_get(i8* noundef %9) #4
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %10)
  %12 = call i64 @CAT_get(i8* noundef %1) #4
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %12)
  call void @CAT_add(i8* noundef %0, i8* noundef %0, i8* noundef %0) #4
  call void @CAT_sub(i8* noundef %0, i8* noundef %0, i8* noundef %0) #4
  %14 = call i64 @CAT_get(i8* noundef %9) #4
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %14)
  %16 = call i64 @CAT_get(i8* noundef %1) #4
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %16)
  call void @CAT_set(i8* noundef %0, i64 noundef 5) #4
  %18 = call i64 @CAT_get(i8* noundef %9) #4
  %19 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %18)
  %20 = call i64 @CAT_get(i8* noundef %1) #4
  %21 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %20)
  ret void


NEXTBLOCK

loopBlocks
loopToBlock ****

constant----
0x732c5a0endconstant
  %3 = call i8* @CAT_new(i64 noundef 5) #4
constantatm  %3 = call i8* @CAT_new(i64 noundef 5) #4  %4 = call i8* @CAT_new(i64 noundef 3) #4  %4 = call i8* @CAT_new(i64 noundef 3) #4
constantatm  %3 = call i8* @CAT_new(i64 noundef 5) #4
constantatm  %4 = call i8* @CAT_new(i64 noundef 3) #4  call void @a_generic_C_function(i8* noundef %3, i8* noundef %4)  call void @a_generic_C_function(i8* noundef %3, i8* noundef %4)  call void @a_generic_C_function(i8* noundef %3, i8* noundef %4)  call void @a_generic_C_function(i8* noundef %3, i8* noundef %4)
constantatm  %3 = call i8* @CAT_new(i64 noundef 5) #4
constantatm  %4 = call i8* @CAT_new(i64 noundef 3) #4
constantatm  %3 = call i8* @CAT_new(i64 noundef 5) #4
constantatm  %4 = call i8* @CAT_new(i64 noundef 3) #4  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)
constantatm  %3 = call i8* @CAT_new(i64 noundef 5) #4
constantatm  %4 = call i8* @CAT_new(i64 noundef 3) #4
constantatm  %3 = call i8* @CAT_new(i64 noundef 5) #4
constantatm  %4 = call i8* @CAT_new(i64 noundef 3) #4  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)
constantatm  %3 = call i8* @CAT_new(i64 noundef 5) #4
constantatm  %4 = call i8* @CAT_new(i64 noundef 3) #4
constantatm  %3 = call i8* @CAT_new(i64 noundef 5) #4
constantatm  %4 = call i8* @CAT_new(i64 noundef 3) #4

BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 5) #4
  %4 = call i8* @CAT_new(i64 noundef 3) #4
  call void @a_generic_C_function(i8* noundef %3, i8* noundef %4)
  %5 = call i64 @CAT_variables() #4
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)
  %7 = call i64 @CAT_cost() #4
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)
  ret i32 0


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
Test passed!
make[1]: Leaving directory '/home/hwo2853/LLVM/H3/tests/test57'
