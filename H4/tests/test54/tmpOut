make[1]: Entering directory '/home/hwo2853/LLVM/H4/tests/test54'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****
loop

8:                                                ; preds = %26, %2
  %9 = phi i32 [ %27, %26 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6, %26 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %24, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %23, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4
  %24 = add nuw nsw i32 %17, 1
  %25 = icmp eq i32 %24, 10
  br i1 %25, label %.preheader3, label %16, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

26:                                               ; preds = %40
  %.lcssa6 = phi i8* [ %41, %40 ]
  %27 = add nuw i32 %9, 1
  %28 = icmp eq i32 %9, %7
  br i1 %28, label %71, label %8, !llvm.loop !6
: 
____________________
loop

29:                                               ; preds = %.preheader3, %40
  %30 = phi i32 [ %43, %40 ], [ 0, %.preheader3 ]
  %31 = phi i32 [ %42, %40 ], [ 0, %.preheader3 ]
  %32 = phi i8* [ %41, %40 ], [ %.lcssa, %.preheader3 ]
  %33 = call i32 @llvm.umax.i32(i32 %30, i32 1)
  %34 = call i64 @CAT_get(i8* noundef %32) #4
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)
  call void @CAT_add(i8* noundef %32, i8* noundef %3, i8* noundef %4) #4
  %36 = call i64 @CAT_get(i8* noundef %32) #4
  %37 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %36)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %38 = call i8* @CAT_new(i64 noundef 1) #4
  %39 = icmp eq i32 %31, 0
  br i1 %39, label %40, label %.preheader1
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

40:                                               ; preds = %.loopexit2, %29
  %41 = phi i8* [ %38, %29 ], [ %.lcssa5, %.loopexit2 ]
  %42 = add nuw i32 %31, 1
  %43 = add i32 %30, 3
  %44 = icmp eq i32 %42, %9
  br i1 %44, label %26, label %29, !llvm.loop !7
: 
____________________
loop

45:                                               ; preds = %.preheader1, %56
  %46 = phi i32 [ %59, %56 ], [ 0, %.preheader1 ]
  %47 = phi i32 [ %58, %56 ], [ 0, %.preheader1 ]
  %48 = phi i8* [ %57, %56 ], [ %38, %.preheader1 ]
  %49 = call i32 @llvm.umax.i32(i32 %46, i32 1)
  %50 = call i64 @CAT_get(i8* noundef %48) #4
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %50)
  call void @CAT_add(i8* noundef %48, i8* noundef %3, i8* noundef %4) #4
  %52 = call i64 @CAT_get(i8* noundef %48) #4
  %53 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %52)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %54 = call i8* @CAT_new(i64 noundef 1) #4
  %55 = icmp eq i32 %47, 0
  br i1 %55, label %56, label %.preheader
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

56:                                               ; preds = %.loopexit, %45
  %57 = phi i8* [ %54, %45 ], [ %.lcssa4, %.loopexit ]
  %58 = add nuw i32 %47, 1
  %59 = add i32 %46, 2
  %60 = icmp eq i32 %58, %33
  br i1 %60, label %.loopexit2, label %45, !llvm.loop !8
: 
____________________
loop

61:                                               ; preds = %.preheader, %61
  %62 = phi i32 [ %69, %61 ], [ 0, %.preheader ]
  %63 = phi i8* [ %68, %61 ], [ %54, %.preheader ]
  %64 = call i64 @CAT_get(i8* noundef %63) #4
  %65 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %64)
  call void @CAT_add(i8* noundef %63, i8* noundef %3, i8* noundef %4) #4
  %66 = call i64 @CAT_get(i8* noundef %63) #4
  %67 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %66)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %68 = call i8* @CAT_new(i64 noundef 1) #4
  %69 = add nuw i32 %62, 1
  %70 = icmp eq i32 %69, %49
  br i1 %70, label %.loopexit, label %61, !llvm.loop !9
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

.loopexit:                                        ; preds = %61
  %.lcssa4 = phi i8* [ %68, %61 ]
  br label %56
: 
____________________
loop

.preheader:                                       ; preds = %45
  br label %61
: 
____________________
loop

.preheader1:                                      ; preds = %29
  br label %45
: 
____________________
loop

.loopexit2:                                       ; preds = %56
  %.lcssa5 = phi i8* [ %57, %56 ]
  br label %40
: 
____________________
loop

.preheader3:                                      ; preds = %16
  %.lcssa = phi i8* [ %23, %16 ]
  br label %29
: 
____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6, %26 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %9 = phi i32 [ %27, %26 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %27 = add nuw i32 %9, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %10 = phi i8* [ %.lcssa6, %26 ], [ %5, %2 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %26, %2
  %9 = phi i32 [ %27, %26 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6, %26 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %23, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %24, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %23, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %23 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %25 = icmp eq i32 %24, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %25, label %.preheader3, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %24, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %23, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4
  %24 = add nuw nsw i32 %17, 1
  %25 = icmp eq i32 %24, 10
  br i1 %25, label %.preheader3, label %16, !llvm.loop !3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa = phi i8* [ %23, %16 ]
phiNode
not falsefind

constantphifound  %.lcssa = phi i8* [ %23, %16 ]  %23 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %29

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

BLOCK AFTER MODIFICATION

.preheader3:                                      ; preds = %16
  br label %28


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3, label %16, !llvm.loop !3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %31 = phi i8* [ %40, %39 ], [ %.lcssa, %.preheader3 ] 

Instruction
  %29 = phi i32 [ %42, %39 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %42 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %30 = phi i32 [ %41, %39 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %41 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %31 = phi i8* [ %40, %39 ], [ %.lcssa, %.preheader3 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %33 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %35 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %37 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %38 = icmp eq i32 %30, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %38, label %39, label %.preheader1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

28:                                               ; preds = %.preheader3, %39
  %29 = phi i32 [ %42, %39 ], [ 0, %.preheader3 ]
  %30 = phi i32 [ %41, %39 ], [ 0, %.preheader3 ]
  %31 = phi i8* [ %40, %39 ], [ %.lcssa, %.preheader3 ]
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)
  %33 = call i64 @CAT_get(i8* noundef %31) #4
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4
  %35 = call i64 @CAT_get(i8* noundef %31) #4
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  %38 = icmp eq i32 %30, 0
  br i1 %38, label %39, label %.preheader1


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %28

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3:                                      ; preds = %16
  br label %28


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %40 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]
phiNode
not falsefind

incomingValue:   %37 = call i8* @CAT_new(i64 noundef 1) #4
incomingConstant: i64 1
incomingValue:   %.lcssa5 = phi i8* [ %56, %55 ]

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %41 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %42 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %43 = icmp eq i32 %41, %9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %43, label %25, label %28, !llvm.loop !7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

39:                                               ; preds = %.loopexit2, %28
  %40 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]
  %41 = add nuw i32 %30, 1
  %42 = add i32 %29, 3
  %43 = icmp eq i32 %41, %9
  br i1 %43, label %25, label %28, !llvm.loop !7


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %44

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader1:                                      ; preds = %28
  br label %44


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa6 = phi i8* [ %40, %39 ]
phiNode
not falsefind

constantphifound  %.lcssa6 = phi i8* [ %40, %39 ]  %40 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp eq i32 %9, %7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %70, label %8, !llvm.loop !6

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]

BLOCK AFTER MODIFICATION

25:                                               ; preds = %39
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %69, label %8, !llvm.loop !6


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ] 

Instruction
  %29 = phi i32 [ %41, %39 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %41 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %30 = phi i32 [ %40, %39 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %40 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %33 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %35 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %37 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %38 = icmp eq i32 %30, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %38, label %39, label %.preheader1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

28:                                               ; preds = %.preheader3, %39
  %29 = phi i32 [ %41, %39 ], [ 0, %.preheader3 ]
  %30 = phi i32 [ %40, %39 ], [ 0, %.preheader3 ]
  %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ]
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)
  %33 = call i64 @CAT_get(i8* noundef %31) #4
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4
  %35 = call i64 @CAT_get(i8* noundef %31) #4
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  %38 = icmp eq i32 %30, 0
  br i1 %38, label %39, label %.preheader1


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %46 = phi i8* [ %55, %54 ], [ %37, %.preheader1 ] 

Instruction
  %44 = phi i32 [ %57, %54 ], [ 0, %.preheader1 ]
phiNode
not falsefind

incomingValue:   %57 = add i32 %44, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %45 = phi i32 [ %56, %54 ], [ 0, %.preheader1 ]
phiNode
not falsefind

incomingValue:   %56 = add nuw i32 %45, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %46 = phi i8* [ %55, %54 ], [ %37, %.preheader1 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %47 = call i32 @llvm.umax.i32(i32 %44, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %48 = call i64 @CAT_get(i8* noundef %46) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %49 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %48)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %46, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %50 = call i64 @CAT_get(i8* noundef %46) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %50)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %52 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %53 = icmp eq i32 %45, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %53, label %54, label %.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

43:                                               ; preds = %.preheader1, %54
  %44 = phi i32 [ %57, %54 ], [ 0, %.preheader1 ]
  %45 = phi i32 [ %56, %54 ], [ 0, %.preheader1 ]
  %46 = phi i8* [ %55, %54 ], [ %37, %.preheader1 ]
  %47 = call i32 @llvm.umax.i32(i32 %44, i32 1)
  %48 = call i64 @CAT_get(i8* noundef %46) #4
  %49 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %48)
  call void @CAT_add(i8* noundef %46, i8* noundef %3, i8* noundef %4) #4
  %50 = call i64 @CAT_get(i8* noundef %46) #4
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %50)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %53 = icmp eq i32 %45, 0
  br i1 %53, label %54, label %.preheader


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3, label %16, !llvm.loop !3


NEXTBLOCK


Instruction
  %70 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %70 = call i8* @CAT_new(i64 noundef 52) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %70, i8* noundef %70, i8* noundef %70) #4

endofblockkilling:  %70 = call i8* @CAT_new(i64 noundef 52) #4
Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_sub(i8* noundef %70, i8* noundef %70, i8* noundef %70) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_set(i8* noundef %70, i64 noundef 42) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %70, i64 noundef 42) #4


Instruction
  %71 = call i64 @CAT_variables() #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %70, i64 noundef 42) #4


Instruction
  %72 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %71)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %70, i64 noundef 42) #4


Instruction
  %73 = call i64 @CAT_cost() #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %70, i64 noundef 42) #4


Instruction
  %74 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %73)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %70, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %70, i64 noundef 42) #4


BLOCK AFTER MODIFICATION

69:                                               ; preds = %25
  %70 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %70, i64 104)
  call void @CAT_sub(i8* noundef %70, i8* noundef %70, i8* noundef %70) #4
  call void @CAT_set(i8* noundef %70, i64 noundef 42) #4
  %71 = call i64 @CAT_variables() #4
  %72 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %71)
  %73 = call i64 @CAT_cost() #4
  %74 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %73)
  ret i32 0


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #46->5REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #45->4

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa6 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]
phiNode
not falsefind

incomingValue:   %37 = call i8* @CAT_new(i64 noundef 1) #4
incomingConstant: i64 1
incomingValue:   %.lcssa5 = phi i8* [ %55, %54 ]

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %40 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %41 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %42 = icmp eq i32 %40, %9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %42, label %25, label %28, !llvm.loop !7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

39:                                               ; preds = %.loopexit2, %28
  %.lcssa6 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]
  %40 = add nuw i32 %30, 1
  %41 = add i32 %29, 3
  %42 = icmp eq i32 %40, %9
  br i1 %42, label %25, label %28, !llvm.loop !7


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %43

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader1:                                      ; preds = %28
  br label %43


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %55 = phi i8* [ %52, %43 ], [ %.lcssa4, %.loopexit ]
phiNode
not falsefind

incomingValue:   %52 = call i8* @CAT_new(i64 noundef 1) #4
incomingConstant: i64 1
incomingValue:   %.lcssa4 = phi i8* [ %66, %59 ]

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %56 = add nuw i32 %45, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %57 = add i32 %44, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %58 = icmp eq i32 %56, %32

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %58, label %.loopexit2, label %43, !llvm.loop !8

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

54:                                               ; preds = %.loopexit, %43
  %55 = phi i8* [ %52, %43 ], [ %.lcssa4, %.loopexit ]
  %56 = add nuw i32 %45, 1
  %57 = add i32 %44, 2
  %58 = icmp eq i32 %56, %32
  br i1 %58, label %.loopexit2, label %43, !llvm.loop !8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %59

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader:                                       ; preds = %43
  br label %59


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %28

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3:                                      ; preds = %16
  br label %28


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp eq i32 %9, %7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %69, label %8, !llvm.loop !6

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

25:                                               ; preds = %39
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %69, label %8, !llvm.loop !6


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa5 = phi i8* [ %55, %54 ]
phiNode
not falsefind

constantphifound  %.lcssa5 = phi i8* [ %55, %54 ]  %55 = phi i8* [ %52, %43 ], [ %.lcssa4, %.loopexit ]

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %39

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = phi i8* [ %52, %43 ], [ %.lcssa4, %.loopexit ]

BLOCK AFTER MODIFICATION

.loopexit2:                                       ; preds = %54
  br label %39


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %46 = phi i8* [ %.lcssa5, %54 ], [ %37, %.preheader1 ] 

Instruction
  %44 = phi i32 [ %56, %54 ], [ 0, %.preheader1 ]
phiNode
not falsefind

incomingValue:   %56 = add i32 %44, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %45 = phi i32 [ %55, %54 ], [ 0, %.preheader1 ]
phiNode
not falsefind

incomingValue:   %55 = add nuw i32 %45, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %46 = phi i8* [ %.lcssa5, %54 ], [ %37, %.preheader1 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %47 = call i32 @llvm.umax.i32(i32 %44, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %48 = call i64 @CAT_get(i8* noundef %46) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %49 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %48)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %46, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %50 = call i64 @CAT_get(i8* noundef %46) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %50)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %52 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %53 = icmp eq i32 %45, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %53, label %54, label %.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

43:                                               ; preds = %.preheader1, %54
  %44 = phi i32 [ %56, %54 ], [ 0, %.preheader1 ]
  %45 = phi i32 [ %55, %54 ], [ 0, %.preheader1 ]
  %46 = phi i8* [ %.lcssa5, %54 ], [ %37, %.preheader1 ]
  %47 = call i32 @llvm.umax.i32(i32 %44, i32 1)
  %48 = call i64 @CAT_get(i8* noundef %46) #4
  %49 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %48)
  call void @CAT_add(i8* noundef %46, i8* noundef %3, i8* noundef %4) #4
  %50 = call i64 @CAT_get(i8* noundef %46) #4
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %50)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %53 = icmp eq i32 %45, 0
  br i1 %53, label %54, label %.preheader


NEXTBLOCK

falseFinds
  %60 = phi i8* [ %65, %58 ], [ %52, %.preheader ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %59 = phi i32 [ %66, %58 ], [ 0, %.preheader ]
phiNode
not falsefind

incomingValue:   %66 = add nuw i32 %59, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %60 = phi i8* [ %65, %58 ], [ %52, %.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %61 = call i64 @CAT_get(i8* noundef %60) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %62 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %61)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %60, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %63 = call i64 @CAT_get(i8* noundef %60) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %64 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %63)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %65 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %65 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %66 = add nuw i32 %59, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %65 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %67 = icmp eq i32 %66, %47

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %65 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %67, label %.loopexit, label %58, !llvm.loop !9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %65 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

58:                                               ; preds = %.preheader, %58
  %59 = phi i32 [ %66, %58 ], [ 0, %.preheader ]
  %60 = phi i8* [ %65, %58 ], [ %52, %.preheader ]
  %61 = call i64 @CAT_get(i8* noundef %60) #4
  %62 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %61)
  call void @CAT_add(i8* noundef %60, i8* noundef %3, i8* noundef %4) #4
  %63 = call i64 @CAT_get(i8* noundef %60) #4
  %64 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %63)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %65 = call i8* @CAT_new(i64 noundef 1) #4
  %66 = add nuw i32 %59, 1
  %67 = icmp eq i32 %66, %47
  br i1 %67, label %.loopexit, label %58, !llvm.loop !9


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ] 

Instruction
  %29 = phi i32 [ %41, %39 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %41 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %30 = phi i32 [ %40, %39 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %40 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %33 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %35 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %37 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %38 = icmp eq i32 %30, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %38, label %39, label %.preheader1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

28:                                               ; preds = %.preheader3, %39
  %29 = phi i32 [ %41, %39 ], [ 0, %.preheader3 ]
  %30 = phi i32 [ %40, %39 ], [ 0, %.preheader3 ]
  %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ]
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)
  %33 = call i64 @CAT_get(i8* noundef %31) #4
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4
  %35 = call i64 @CAT_get(i8* noundef %31) #4
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  %38 = icmp eq i32 %30, 0
  br i1 %38, label %39, label %.preheader1


NEXTBLOCK


Instruction
  %69 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %69 = call i8* @CAT_new(i64 noundef 52) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_set(i8* %69, i64 104)

endofblockkilling:  call void @CAT_set(i8* %69, i64 104)
endofblockkilling:  %15 = call i8* @CAT_new(i64 noundef 1) #4
endofblockkilling:  %5 = call i8* @CAT_new(i64 noundef 0) #4
endofblockkilling:  %69 = call i8* @CAT_new(i64 noundef 52) #4
endofblockkilling:  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
endofblockkilling:  %37 = call i8* @CAT_new(i64 noundef 1) #4
Constant after instruction


Instruction
  call void @CAT_sub(i8* noundef %69, i8* noundef %69, i8* noundef %69) #4

Constant after instruction


Instruction
  call void @CAT_set(i8* noundef %69, i64 noundef 42) #4

Constant after instruction
  call void @CAT_set(i8* noundef %69, i64 noundef 42) #4


Instruction
  %70 = call i64 @CAT_variables() #4

Constant after instruction
  call void @CAT_set(i8* noundef %69, i64 noundef 42) #4


Instruction
  %71 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %70)

Constant after instruction
  call void @CAT_set(i8* noundef %69, i64 noundef 42) #4


Instruction
  %72 = call i64 @CAT_cost() #4

Constant after instruction
  call void @CAT_set(i8* noundef %69, i64 noundef 42) #4


Instruction
  %73 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %72)

Constant after instruction
  call void @CAT_set(i8* noundef %69, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %69, i64 noundef 42) #4


BLOCK AFTER MODIFICATION

68:                                               ; preds = %25
  %69 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %69, i64 104)
  call void @CAT_sub(i8* noundef %69, i8* noundef %69, i8* noundef %69) #4
  call void @CAT_set(i8* noundef %69, i64 noundef 42) #4
  %70 = call i64 @CAT_variables() #4
  %71 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %70)
  %72 = call i64 @CAT_cost() #4
  %73 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %72)
  ret i32 0


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #46->5REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #45->4

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa6 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]
phiNode
not falsefind

incomingValue:   %37 = call i8* @CAT_new(i64 noundef 1) #4
incomingConstant: i64 1
incomingValue:   %.lcssa5 = phi i8* [ %52, %43 ], [ %.lcssa4, %.loopexit ]

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %40 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %41 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %42 = icmp eq i32 %40, %9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %42, label %25, label %28, !llvm.loop !7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

39:                                               ; preds = %.loopexit2, %28
  %.lcssa6 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]
  %40 = add nuw i32 %30, 1
  %41 = add i32 %29, 3
  %42 = icmp eq i32 %40, %9
  br i1 %42, label %25, label %28, !llvm.loop !7


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa5 = phi i8* [ %52, %43 ], [ %.lcssa4, %.loopexit ]
phiNode
not falsefind

incomingValue:   %52 = call i8* @CAT_new(i64 noundef 1) #4
incomingConstant: i64 1
incomingValue:   %.lcssa4 = phi i8* [ %65, %58 ]

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %55 = add nuw i32 %45, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %56 = add i32 %44, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %57 = icmp eq i32 %55, %32

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %57, label %.loopexit2, label %43, !llvm.loop !8

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

54:                                               ; preds = %.loopexit, %43
  %.lcssa5 = phi i8* [ %52, %43 ], [ %.lcssa4, %.loopexit ]
  %55 = add nuw i32 %45, 1
  %56 = add i32 %44, 2
  %57 = icmp eq i32 %55, %32
  br i1 %57, label %.loopexit2, label %43, !llvm.loop !8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %58

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader:                                       ; preds = %43
  br label %58


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa4 = phi i8* [ %65, %58 ]
phiNode
not falsefind

constantphifound  %.lcssa4 = phi i8* [ %65, %58 ]  %65 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %65 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %54

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %65 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4

BLOCK AFTER MODIFICATION

.loopexit:                                        ; preds = %58
  br label %54


NEXTBLOCK

falseFinds
  %60 = phi i8* [ %.lcssa4, %58 ], [ %52, %.preheader ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %59 = phi i32 [ %65, %58 ], [ 0, %.preheader ]
phiNode
not falsefind

incomingValue:   %65 = add nuw i32 %59, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %60 = phi i8* [ %.lcssa4, %58 ], [ %52, %.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %61 = call i64 @CAT_get(i8* noundef %60) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %62 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %61)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %60, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %63 = call i64 @CAT_get(i8* noundef %60) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %64 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %63)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %65 = add nuw i32 %59, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %66 = icmp eq i32 %65, %47

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %66, label %.loopexit, label %58, !llvm.loop !9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

58:                                               ; preds = %.preheader, %58
  %59 = phi i32 [ %65, %58 ], [ 0, %.preheader ]
  %60 = phi i8* [ %.lcssa4, %58 ], [ %52, %.preheader ]
  %61 = call i64 @CAT_get(i8* noundef %60) #4
  %62 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %61)
  call void @CAT_add(i8* noundef %60, i8* noundef %3, i8* noundef %4) #4
  %63 = call i64 @CAT_get(i8* noundef %60) #4
  %64 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %63)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %65 = add nuw i32 %59, 1
  %66 = icmp eq i32 %65, %47
  br i1 %66, label %.loopexit, label %58, !llvm.loop !9


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa6 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]
phiNode
not falsefind

incomingValue:   %37 = call i8* @CAT_new(i64 noundef 1) #4
incomingConstant: i64 1
incomingValue:   %.lcssa5 = phi i8* [ %52, %43 ], [ %.lcssa4, %.loopexit ]

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %40 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %41 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %42 = icmp eq i32 %40, %9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %42, label %25, label %28, !llvm.loop !7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

39:                                               ; preds = %.loopexit2, %28
  %.lcssa6 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]
  %40 = add nuw i32 %30, 1
  %41 = add i32 %29, 3
  %42 = icmp eq i32 %40, %9
  br i1 %42, label %25, label %28, !llvm.loop !7


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %43

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader1:                                      ; preds = %28
  br label %43


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3, label %16, !llvm.loop !3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp eq i32 %9, %7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %67, label %8, !llvm.loop !6

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

25:                                               ; preds = %39
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %67, label %8, !llvm.loop !6


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ] 

Instruction
  %29 = phi i32 [ %41, %39 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %41 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %30 = phi i32 [ %40, %39 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %40 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %33 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %35 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %37 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %38 = icmp eq i32 %30, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %38, label %39, label %.preheader1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

28:                                               ; preds = %.preheader3, %39
  %29 = phi i32 [ %41, %39 ], [ 0, %.preheader3 ]
  %30 = phi i32 [ %40, %39 ], [ 0, %.preheader3 ]
  %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ]
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)
  %33 = call i64 @CAT_get(i8* noundef %31) #4
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4
  %35 = call i64 @CAT_get(i8* noundef %31) #4
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  %38 = icmp eq i32 %30, 0
  br i1 %38, label %39, label %.preheader1


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #46->5REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #45->4

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %39

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit2:                                       ; preds = %54
  br label %39


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %46 = phi i8* [ %.lcssa5, %54 ], [ %37, %.preheader1 ] 

Instruction
  %44 = phi i32 [ %56, %54 ], [ 0, %.preheader1 ]
phiNode
not falsefind

incomingValue:   %56 = add i32 %44, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %45 = phi i32 [ %55, %54 ], [ 0, %.preheader1 ]
phiNode
not falsefind

incomingValue:   %55 = add nuw i32 %45, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %46 = phi i8* [ %.lcssa5, %54 ], [ %37, %.preheader1 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %47 = call i32 @llvm.umax.i32(i32 %44, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %48 = call i64 @CAT_get(i8* noundef %46) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %49 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %48)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %46, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %50 = call i64 @CAT_get(i8* noundef %46) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %50)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %52 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %53 = icmp eq i32 %45, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %53, label %54, label %.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

43:                                               ; preds = %.preheader1, %54
  %44 = phi i32 [ %56, %54 ], [ 0, %.preheader1 ]
  %45 = phi i32 [ %55, %54 ], [ 0, %.preheader1 ]
  %46 = phi i8* [ %.lcssa5, %54 ], [ %37, %.preheader1 ]
  %47 = call i32 @llvm.umax.i32(i32 %44, i32 1)
  %48 = call i64 @CAT_get(i8* noundef %46) #4
  %49 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %48)
  call void @CAT_add(i8* noundef %46, i8* noundef %3, i8* noundef %4) #4
  %50 = call i64 @CAT_get(i8* noundef %46) #4
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %50)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %53 = icmp eq i32 %45, 0
  br i1 %53, label %54, label %.preheader


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa5 = phi i8* [ %52, %43 ], [ %.lcssa4, %.loopexit ]
phiNode
not falsefind

incomingValue:   %52 = call i8* @CAT_new(i64 noundef 1) #4
incomingConstant: i64 1
incomingValue:   %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
incomingConstant: i64 1
constant: i64 1
constantphifoundHERE  %.lcssa5 = phi i8* [ %52, %43 ], [ %.lcssa4, %.loopexit ]i64 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %55 = add nuw i32 %45, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %56 = add i32 %44, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %57 = icmp eq i32 %55, %32

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %57, label %.loopexit2, label %43, !llvm.loop !8

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4

BLOCK AFTER MODIFICATION

53:                                               ; preds = %.loopexit, %43
  %54 = add nuw i32 %45, 1
  %55 = add i32 %44, 2
  %56 = icmp eq i32 %54, %32
  br i1 %56, label %.loopexit2, label %43, !llvm.loop !8


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %53

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit:                                        ; preds = %57
  br label %53


NEXTBLOCK

falseFinds
  %59 = phi i8* [ %.lcssa4, %57 ], [ %.lcssa5, %.preheader ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %58 = phi i32 [ %64, %57 ], [ 0, %.preheader ]
phiNode
not falsefind

incomingValue:   %64 = add nuw i32 %58, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %59 = phi i8* [ %.lcssa4, %57 ], [ %.lcssa5, %.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %60 = call i64 @CAT_get(i8* noundef %59) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %61 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %60)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %59, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %62 = call i64 @CAT_get(i8* noundef %59) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %63 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %62)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %64 = add nuw i32 %58, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %65 = icmp eq i32 %64, %47

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %65, label %.loopexit, label %57, !llvm.loop !9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

57:                                               ; preds = %.preheader, %57
  %58 = phi i32 [ %64, %57 ], [ 0, %.preheader ]
  %59 = phi i8* [ %.lcssa4, %57 ], [ %.lcssa5, %.preheader ]
  %60 = call i64 @CAT_get(i8* noundef %59) #4
  %61 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %60)
  call void @CAT_add(i8* noundef %59, i8* noundef %3, i8* noundef %4) #4
  %62 = call i64 @CAT_get(i8* noundef %59) #4
  %63 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %62)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %64 = add nuw i32 %58, 1
  %65 = icmp eq i32 %64, %47
  br i1 %65, label %.loopexit, label %57, !llvm.loop !9


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp eq i32 %9, %7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %66, label %8, !llvm.loop !6

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

25:                                               ; preds = %39
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %66, label %8, !llvm.loop !6


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ] 

Instruction
  %29 = phi i32 [ %41, %39 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %41 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %30 = phi i32 [ %40, %39 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %40 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %33 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %35 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %37 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %38 = icmp eq i32 %30, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %38, label %39, label %.preheader1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

28:                                               ; preds = %.preheader3, %39
  %29 = phi i32 [ %41, %39 ], [ 0, %.preheader3 ]
  %30 = phi i32 [ %40, %39 ], [ 0, %.preheader3 ]
  %31 = phi i8* [ %.lcssa6, %39 ], [ %.lcssa, %.preheader3 ]
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)
  %33 = call i64 @CAT_get(i8* noundef %31) #4
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4
  %35 = call i64 @CAT_get(i8* noundef %31) #4
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  %38 = icmp eq i32 %30, 0
  br i1 %38, label %39, label %.preheader1


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %46 = phi i8* [ %.lcssa5, %53 ], [ %37, %.preheader1 ] 

Instruction
  %44 = phi i32 [ %55, %53 ], [ 0, %.preheader1 ]
phiNode
not falsefind

incomingValue:   %55 = add i32 %44, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %45 = phi i32 [ %54, %53 ], [ 0, %.preheader1 ]
phiNode
not falsefind

incomingValue:   %54 = add nuw i32 %45, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %46 = phi i8* [ %.lcssa5, %53 ], [ %37, %.preheader1 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %47 = call i32 @llvm.umax.i32(i32 %44, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %48 = call i64 @CAT_get(i8* noundef %46) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %49 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %48)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %46, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %50 = call i64 @CAT_get(i8* noundef %46) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %50)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %52 = icmp eq i32 %45, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %52, label %53, label %.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

43:                                               ; preds = %.preheader1, %53
  %44 = phi i32 [ %55, %53 ], [ 0, %.preheader1 ]
  %45 = phi i32 [ %54, %53 ], [ 0, %.preheader1 ]
  %46 = phi i8* [ %.lcssa5, %53 ], [ %37, %.preheader1 ]
  %47 = call i32 @llvm.umax.i32(i32 %44, i32 1)
  %48 = call i64 @CAT_get(i8* noundef %46) #4
  %49 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %48)
  call void @CAT_add(i8* noundef %46, i8* noundef %3, i8* noundef %4) #4
  %50 = call i64 @CAT_get(i8* noundef %46) #4
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %50)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %52 = icmp eq i32 %45, 0
  br i1 %52, label %53, label %.preheader


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %28

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3:                                      ; preds = %16
  br label %28


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3, label %16, !llvm.loop !3


NEXTBLOCK


Instruction
  %67 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %67 = call i8* @CAT_new(i64 noundef 52) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_set(i8* %67, i64 104)

endofblockkilling:  call void @CAT_set(i8* %67, i64 104)
endofblockkilling:  %15 = call i8* @CAT_new(i64 noundef 1) #4
endofblockkilling:  %5 = call i8* @CAT_new(i64 noundef 0) #4
endofblockkilling:  %67 = call i8* @CAT_new(i64 noundef 52) #4
endofblockkilling:  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
endofblockkilling:  %37 = call i8* @CAT_new(i64 noundef 1) #4
Constant after instruction


Instruction
  call void @CAT_sub(i8* noundef %67, i8* noundef %67, i8* noundef %67) #4

Constant after instruction


Instruction
  call void @CAT_set(i8* noundef %67, i64 noundef 42) #4

Constant after instruction
  call void @CAT_set(i8* noundef %67, i64 noundef 42) #4


Instruction
  %68 = call i64 @CAT_variables() #4

Constant after instruction
  call void @CAT_set(i8* noundef %67, i64 noundef 42) #4


Instruction
  %69 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %68)

Constant after instruction
  call void @CAT_set(i8* noundef %67, i64 noundef 42) #4


Instruction
  %70 = call i64 @CAT_cost() #4

Constant after instruction
  call void @CAT_set(i8* noundef %67, i64 noundef 42) #4


Instruction
  %71 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %70)

Constant after instruction
  call void @CAT_set(i8* noundef %67, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %67, i64 noundef 42) #4


BLOCK AFTER MODIFICATION

66:                                               ; preds = %25
  %67 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %67, i64 104)
  call void @CAT_sub(i8* noundef %67, i8* noundef %67, i8* noundef %67) #4
  call void @CAT_set(i8* noundef %67, i64 noundef 42) #4
  %68 = call i64 @CAT_variables() #4
  %69 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %68)
  %70 = call i64 @CAT_cost() #4
  %71 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %70)
  ret i32 0


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #46->5REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #45->4

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa6 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]
phiNode
not falsefind

incomingValue:   %37 = call i8* @CAT_new(i64 noundef 1) #4
incomingConstant: i64 1
incomingValue:   %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
incomingConstant: i64 1
constant: i64 1
constantphifoundHERE  %.lcssa6 = phi i8* [ %37, %28 ], [ %.lcssa5, %.loopexit2 ]i64 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %40 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %41 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %42 = icmp eq i32 %40, %9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %42, label %25, label %28, !llvm.loop !7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %37 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4

BLOCK AFTER MODIFICATION

38:                                               ; preds = %.loopexit2, %28
  %39 = add nuw i32 %30, 1
  %40 = add i32 %29, 3
  %41 = icmp eq i32 %39, %9
  br i1 %41, label %25, label %28, !llvm.loop !7


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %42

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader1:                                      ; preds = %28
  br label %42


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3, label %16, !llvm.loop !3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %39 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %40 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %41 = icmp eq i32 %39, %9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %41, label %25, label %28, !llvm.loop !7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

38:                                               ; preds = %.loopexit2, %28
  %39 = add nuw i32 %30, 1
  %40 = add i32 %29, 3
  %41 = icmp eq i32 %39, %9
  br i1 %41, label %25, label %28, !llvm.loop !7


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %53 = add nuw i32 %44, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %54 = add i32 %43, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %55 = icmp eq i32 %53, %32

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %55, label %.loopexit2, label %42, !llvm.loop !8

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

52:                                               ; preds = %.loopexit, %42
  %53 = add nuw i32 %44, 1
  %54 = add i32 %43, 2
  %55 = icmp eq i32 %53, %32
  br i1 %55, label %.loopexit2, label %42, !llvm.loop !8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %56

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader:                                       ; preds = %42
  br label %56


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %38

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit2:                                       ; preds = %52
  br label %38


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %45 = phi i8* [ %.lcssa5, %52 ], [ %.lcssa6, %.preheader1 ] 

Instruction
  %43 = phi i32 [ %54, %52 ], [ 0, %.preheader1 ]
phiNode
not falsefind

incomingValue:   %54 = add i32 %43, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %44 = phi i32 [ %53, %52 ], [ 0, %.preheader1 ]
phiNode
not falsefind

incomingValue:   %53 = add nuw i32 %44, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %45 = phi i8* [ %.lcssa5, %52 ], [ %.lcssa6, %.preheader1 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %46 = call i32 @llvm.umax.i32(i32 %43, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %47 = call i64 @CAT_get(i8* noundef %45) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %48 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %47)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %45, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %49 = call i64 @CAT_get(i8* noundef %45) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %50 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %49)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %51 = icmp eq i32 %44, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %51, label %52, label %.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

42:                                               ; preds = %.preheader1, %52
  %43 = phi i32 [ %54, %52 ], [ 0, %.preheader1 ]
  %44 = phi i32 [ %53, %52 ], [ 0, %.preheader1 ]
  %45 = phi i8* [ %.lcssa5, %52 ], [ %.lcssa6, %.preheader1 ]
  %46 = call i32 @llvm.umax.i32(i32 %43, i32 1)
  %47 = call i64 @CAT_get(i8* noundef %45) #4
  %48 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %47)
  call void @CAT_add(i8* noundef %45, i8* noundef %3, i8* noundef %4) #4
  %49 = call i64 @CAT_get(i8* noundef %45) #4
  %50 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %49)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %51 = icmp eq i32 %44, 0
  br i1 %51, label %52, label %.preheader


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #46->5REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #45->4

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %52

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit:                                        ; preds = %56
  br label %52


NEXTBLOCK

falseFinds
  %58 = phi i8* [ %.lcssa4, %56 ], [ %.lcssa5, %.preheader ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %57 = phi i32 [ %63, %56 ], [ 0, %.preheader ]
phiNode
not falsefind

incomingValue:   %63 = add nuw i32 %57, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %58 = phi i8* [ %.lcssa4, %56 ], [ %.lcssa5, %.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %59 = call i64 @CAT_get(i8* noundef %58) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %60 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %59)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %58, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %61 = call i64 @CAT_get(i8* noundef %58) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %62 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %61)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %63 = add nuw i32 %57, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %64 = icmp eq i32 %63, %46

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %64, label %.loopexit, label %56, !llvm.loop !9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

56:                                               ; preds = %.preheader, %56
  %57 = phi i32 [ %63, %56 ], [ 0, %.preheader ]
  %58 = phi i8* [ %.lcssa4, %56 ], [ %.lcssa5, %.preheader ]
  %59 = call i64 @CAT_get(i8* noundef %58) #4
  %60 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %59)
  call void @CAT_add(i8* noundef %58, i8* noundef %3, i8* noundef %4) #4
  %61 = call i64 @CAT_get(i8* noundef %58) #4
  %62 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %61)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %63 = add nuw i32 %57, 1
  %64 = icmp eq i32 %63, %46
  br i1 %64, label %.loopexit, label %56, !llvm.loop !9


NEXTBLOCK


Instruction
  %66 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %66 = call i8* @CAT_new(i64 noundef 52) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_set(i8* %66, i64 104)

endofblockkilling:  call void @CAT_set(i8* %66, i64 104)
endofblockkilling:  %15 = call i8* @CAT_new(i64 noundef 1) #4
endofblockkilling:  %5 = call i8* @CAT_new(i64 noundef 0) #4
endofblockkilling:  %66 = call i8* @CAT_new(i64 noundef 52) #4
endofblockkilling:  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
endofblockkilling:  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
Constant after instruction


Instruction
  call void @CAT_sub(i8* noundef %66, i8* noundef %66, i8* noundef %66) #4

Constant after instruction


Instruction
  call void @CAT_set(i8* noundef %66, i64 noundef 42) #4

Constant after instruction
  call void @CAT_set(i8* noundef %66, i64 noundef 42) #4


Instruction
  %67 = call i64 @CAT_variables() #4

Constant after instruction
  call void @CAT_set(i8* noundef %66, i64 noundef 42) #4


Instruction
  %68 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %67)

Constant after instruction
  call void @CAT_set(i8* noundef %66, i64 noundef 42) #4


Instruction
  %69 = call i64 @CAT_cost() #4

Constant after instruction
  call void @CAT_set(i8* noundef %66, i64 noundef 42) #4


Instruction
  %70 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %69)

Constant after instruction
  call void @CAT_set(i8* noundef %66, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %66, i64 noundef 42) #4


BLOCK AFTER MODIFICATION

65:                                               ; preds = %25
  %66 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %66, i64 104)
  call void @CAT_sub(i8* noundef %66, i8* noundef %66, i8* noundef %66) #4
  call void @CAT_set(i8* noundef %66, i64 noundef 42) #4
  %67 = call i64 @CAT_variables() #4
  %68 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %67)
  %69 = call i64 @CAT_cost() #4
  %70 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %69)
  ret i32 0


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %31 = phi i8* [ %.lcssa6, %38 ], [ %.lcssa, %.preheader3 ] 

Instruction
  %29 = phi i32 [ %40, %38 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %40 = add i32 %29, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %30 = phi i32 [ %39, %38 ], [ 0, %.preheader3 ]
phiNode
not falsefind

incomingValue:   %39 = add nuw i32 %30, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %31 = phi i8* [ %.lcssa6, %38 ], [ %.lcssa, %.preheader3 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %33 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %35 = call i64 @CAT_get(i8* noundef %31) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %37 = icmp eq i32 %30, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %37, label %38, label %.preheader1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

28:                                               ; preds = %.preheader3, %38
  %29 = phi i32 [ %40, %38 ], [ 0, %.preheader3 ]
  %30 = phi i32 [ %39, %38 ], [ 0, %.preheader3 ]
  %31 = phi i8* [ %.lcssa6, %38 ], [ %.lcssa, %.preheader3 ]
  %32 = call i32 @llvm.umax.i32(i32 %29, i32 1)
  %33 = call i64 @CAT_get(i8* noundef %31) #4
  %34 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %33)
  call void @CAT_add(i8* noundef %31, i8* noundef %3, i8* noundef %4) #4
  %35 = call i64 @CAT_get(i8* noundef %31) #4
  %36 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %35)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %37 = icmp eq i32 %30, 0
  br i1 %37, label %38, label %.preheader1


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %28

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3:                                      ; preds = %16
  br label %28


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp eq i32 %9, %7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %65, label %8, !llvm.loop !6

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

25:                                               ; preds = %38
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %65, label %8, !llvm.loop !6


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_0.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****
loop

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

25:                                               ; preds = %.loopexit2
  %.lcssa6.lcssa = phi i8* [ %.lcssa6, %.loopexit2 ]
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %60, label %8, !llvm.loop !6
: 
____________________
loop

.preheader3:                                      ; preds = %.preheader3.preheader, %.loopexit2
  %28 = phi i32 [ %38, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %29 = phi i32 [ %37, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa.lcssa, %.preheader3.preheader ]
  %31 = call i32 @llvm.umax.i32(i32 %28, i32 1)
  %32 = call i64 @CAT_get(i8* noundef %30) #4
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %32)
  call void @CAT_add(i8* noundef %30, i8* noundef %3, i8* noundef %4) #4
  %34 = call i64 @CAT_get(i8* noundef %30) #4
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %36 = icmp eq i32 %29, 0
  br i1 %36, label %.loopexit2, label %.preheader1.preheader
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

.loopexit2:                                       ; preds = %.loopexit2.loopexit, %.preheader3
  %37 = add nuw i32 %29, 1
  %38 = add i32 %28, 3
  %39 = icmp eq i32 %37, %9
  br i1 %39, label %25, label %.preheader3, !llvm.loop !7
: 
____________________
loop

.preheader1:                                      ; preds = %.preheader1.preheader, %.loopexit
  %40 = phi i32 [ %50, %.loopexit ], [ 0, %.preheader1.preheader ]
  %41 = phi i32 [ %49, %.loopexit ], [ 0, %.preheader1.preheader ]
  %42 = phi i8* [ %.lcssa5, %.loopexit ], [ %.lcssa6, %.preheader1.preheader ]
  %43 = call i32 @llvm.umax.i32(i32 %40, i32 1)
  %44 = call i64 @CAT_get(i8* noundef %42) #4
  %45 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %44)
  call void @CAT_add(i8* noundef %42, i8* noundef %3, i8* noundef %4) #4
  %46 = call i64 @CAT_get(i8* noundef %42) #4
  %47 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %46)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %48 = icmp eq i32 %41, 0
  br i1 %48, label %.loopexit, label %.preheader.preheader
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

.loopexit:                                        ; preds = %.loopexit.loopexit, %.preheader1
  %49 = add nuw i32 %41, 1
  %50 = add i32 %40, 2
  %51 = icmp eq i32 %49, %31
  br i1 %51, label %.loopexit2.loopexit, label %.preheader1, !llvm.loop !8
: 
____________________
loop

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %52 = phi i32 [ %58, %.preheader ], [ 0, %.preheader.preheader ]
  %53 = phi i8* [ %.lcssa4, %.preheader ], [ %.lcssa5, %.preheader.preheader ]
  %54 = call i64 @CAT_get(i8* noundef %53) #4
  %55 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %54)
  call void @CAT_add(i8* noundef %53, i8* noundef %3, i8* noundef %4) #4
  %56 = call i64 @CAT_get(i8* noundef %53) #4
  %57 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %56)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %58 = add nuw i32 %52, 1
  %59 = icmp eq i32 %58, %43
  br i1 %59, label %.loopexit.loopexit, label %.preheader, !llvm.loop !9
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

.loopexit.loopexit:                               ; preds = %.preheader
  br label %.loopexit
: 
____________________
loop

.preheader.preheader:                             ; preds = %.preheader1
  br label %.preheader
: 
____________________
loop

.preheader1.preheader:                            ; preds = %.preheader3
  br label %.preheader1
: 
____________________
loop

.loopexit2.loopexit:                              ; preds = %.loopexit
  br label %.loopexit2
: 
____________________
loop

.preheader3.preheader:                            ; preds = %16
  %.lcssa.lcssa = phi i8* [ %.lcssa, %16 ]
  br label %.preheader3
: 
____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa.lcssa = phi i8* [ %.lcssa, %16 ]
phiNode
not falsefind

constantphifound  %.lcssa.lcssa = phi i8* [ %.lcssa, %16 ]  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %.preheader3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

BLOCK AFTER MODIFICATION

.preheader3.preheader:                            ; preds = %16
  br label %.preheader3


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ] 

Instruction
  %28 = phi i32 [ %38, %.loopexit2 ], [ 0, %.preheader3.preheader ]
phiNode
not falsefind

incomingValue:   %38 = add i32 %28, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %29 = phi i32 [ %37, %.loopexit2 ], [ 0, %.preheader3.preheader ]
phiNode
not falsefind

incomingValue:   %37 = add nuw i32 %29, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %31 = call i32 @llvm.umax.i32(i32 %28, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %32 = call i64 @CAT_get(i8* noundef %30) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %32)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %30, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %34 = call i64 @CAT_get(i8* noundef %30) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %36 = icmp eq i32 %29, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %36, label %.loopexit2, label %.preheader1.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3:                                      ; preds = %.preheader3.preheader, %.loopexit2
  %28 = phi i32 [ %38, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %29 = phi i32 [ %37, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ]
  %31 = call i32 @llvm.umax.i32(i32 %28, i32 1)
  %32 = call i64 @CAT_get(i8* noundef %30) #4
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %32)
  call void @CAT_add(i8* noundef %30, i8* noundef %3, i8* noundef %4) #4
  %34 = call i64 @CAT_get(i8* noundef %30) #4
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %36 = icmp eq i32 %29, 0
  br i1 %36, label %.loopexit2, label %.preheader1.preheader


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.preheader3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3.preheader:                            ; preds = %16
  br label %.preheader3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %37 = add nuw i32 %29, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %38 = add i32 %28, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %39 = icmp eq i32 %37, %9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %39, label %25, label %.preheader3, !llvm.loop !7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit2:                                       ; preds = %.loopexit2.loopexit, %.preheader3
  %37 = add nuw i32 %29, 1
  %38 = add i32 %28, 3
  %39 = icmp eq i32 %37, %9
  br i1 %39, label %25, label %.preheader3, !llvm.loop !7


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.preheader1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader1.preheader:                            ; preds = %.preheader3
  br label %.preheader1


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa6.lcssa = phi i8* [ %.lcssa6, %.loopexit2 ]
phiNode
not falsefind

constantphifound  %.lcssa6.lcssa = phi i8* [ %.lcssa6, %.loopexit2 ]  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp eq i32 %9, %7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %60, label %8, !llvm.loop !6

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4

BLOCK AFTER MODIFICATION

25:                                               ; preds = %.loopexit2
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %60, label %8, !llvm.loop !6


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ] 

Instruction
  %28 = phi i32 [ %38, %.loopexit2 ], [ 0, %.preheader3.preheader ]
phiNode
not falsefind

incomingValue:   %38 = add i32 %28, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %29 = phi i32 [ %37, %.loopexit2 ], [ 0, %.preheader3.preheader ]
phiNode
not falsefind

incomingValue:   %37 = add nuw i32 %29, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %31 = call i32 @llvm.umax.i32(i32 %28, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %32 = call i64 @CAT_get(i8* noundef %30) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %32)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %30, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %34 = call i64 @CAT_get(i8* noundef %30) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %36 = icmp eq i32 %29, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %36, label %.loopexit2, label %.preheader1.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3:                                      ; preds = %.preheader3.preheader, %.loopexit2
  %28 = phi i32 [ %38, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %29 = phi i32 [ %37, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ]
  %31 = call i32 @llvm.umax.i32(i32 %28, i32 1)
  %32 = call i64 @CAT_get(i8* noundef %30) #4
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %32)
  call void @CAT_add(i8* noundef %30, i8* noundef %3, i8* noundef %4) #4
  %34 = call i64 @CAT_get(i8* noundef %30) #4
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %36 = icmp eq i32 %29, 0
  br i1 %36, label %.loopexit2, label %.preheader1.preheader


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %42 = phi i8* [ %.lcssa5, %.loopexit ], [ %.lcssa6, %.preheader1.preheader ] 

Instruction
  %40 = phi i32 [ %50, %.loopexit ], [ 0, %.preheader1.preheader ]
phiNode
not falsefind

incomingValue:   %50 = add i32 %40, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %41 = phi i32 [ %49, %.loopexit ], [ 0, %.preheader1.preheader ]
phiNode
not falsefind

incomingValue:   %49 = add nuw i32 %41, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %42 = phi i8* [ %.lcssa5, %.loopexit ], [ %.lcssa6, %.preheader1.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %43 = call i32 @llvm.umax.i32(i32 %40, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %44 = call i64 @CAT_get(i8* noundef %42) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %45 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %44)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %42, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %46 = call i64 @CAT_get(i8* noundef %42) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %47 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %46)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %48 = icmp eq i32 %41, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %48, label %.loopexit, label %.preheader.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader1:                                      ; preds = %.preheader1.preheader, %.loopexit
  %40 = phi i32 [ %50, %.loopexit ], [ 0, %.preheader1.preheader ]
  %41 = phi i32 [ %49, %.loopexit ], [ 0, %.preheader1.preheader ]
  %42 = phi i8* [ %.lcssa5, %.loopexit ], [ %.lcssa6, %.preheader1.preheader ]
  %43 = call i32 @llvm.umax.i32(i32 %40, i32 1)
  %44 = call i64 @CAT_get(i8* noundef %42) #4
  %45 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %44)
  call void @CAT_add(i8* noundef %42, i8* noundef %3, i8* noundef %4) #4
  %46 = call i64 @CAT_get(i8* noundef %42) #4
  %47 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %46)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %48 = icmp eq i32 %41, 0
  br i1 %48, label %.loopexit, label %.preheader.preheader


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3


NEXTBLOCK


Instruction
  %61 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %61 = call i8* @CAT_new(i64 noundef 52) #4


Instruction
  call void @CAT_set(i8* %61, i64 104)

endofblockkilling:  %61 = call i8* @CAT_new(i64 noundef 52) #4
Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* %61, i64 104)


Instruction
  call void @CAT_sub(i8* noundef %61, i8* noundef %61, i8* noundef %61) #4

endofblockkilling:  call void @CAT_set(i8* %61, i64 104)
Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4


Instruction
  %62 = call i64 @CAT_variables() #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4


Instruction
  %63 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %62)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4


Instruction
  %64 = call i64 @CAT_cost() #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4


Instruction
  %65 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %64)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4


BLOCK AFTER MODIFICATION

60:                                               ; preds = %25
  %61 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %61, i64 104)
  call void @CAT_set(i8* %61, i64 0)
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4
  %62 = call i64 @CAT_variables() #4
  %63 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %62)
  %64 = call i64 @CAT_cost() #4
  %65 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %64)
  ret i32 0


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #46->5REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #45->4

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %37 = add nuw i32 %29, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %38 = add i32 %28, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %39 = icmp eq i32 %37, %9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %39, label %25, label %.preheader3, !llvm.loop !7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit2:                                       ; preds = %.loopexit2.loopexit, %.preheader3
  %37 = add nuw i32 %29, 1
  %38 = add i32 %28, 3
  %39 = icmp eq i32 %37, %9
  br i1 %39, label %25, label %.preheader3, !llvm.loop !7


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.preheader1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader1.preheader:                            ; preds = %.preheader3
  br label %.preheader1


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %49 = add nuw i32 %41, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %50 = add i32 %40, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %51 = icmp eq i32 %49, %31

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %51, label %.loopexit2.loopexit, label %.preheader1, !llvm.loop !8

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit:                                        ; preds = %.loopexit.loopexit, %.preheader1
  %49 = add nuw i32 %41, 1
  %50 = add i32 %40, 2
  %51 = icmp eq i32 %49, %31
  br i1 %51, label %.loopexit2.loopexit, label %.preheader1, !llvm.loop !8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader.preheader:                             ; preds = %.preheader1
  br label %.preheader


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.preheader3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3.preheader:                            ; preds = %16
  br label %.preheader3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp eq i32 %9, %7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %60, label %8, !llvm.loop !6

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

25:                                               ; preds = %.loopexit2
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %60, label %8, !llvm.loop !6


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.loopexit2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit2.loopexit:                              ; preds = %.loopexit
  br label %.loopexit2


NEXTBLOCK

falseFinds
  %53 = phi i8* [ %.lcssa4, %.preheader ], [ %.lcssa5, %.preheader.preheader ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %52 = phi i32 [ %58, %.preheader ], [ 0, %.preheader.preheader ]
phiNode
not falsefind

incomingValue:   %58 = add nuw i32 %52, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %53 = phi i8* [ %.lcssa4, %.preheader ], [ %.lcssa5, %.preheader.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %54 = call i64 @CAT_get(i8* noundef %53) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %55 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %54)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %53, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %56 = call i64 @CAT_get(i8* noundef %53) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %57 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %56)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %58 = add nuw i32 %52, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %59 = icmp eq i32 %58, %43

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %59, label %.loopexit.loopexit, label %.preheader, !llvm.loop !9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %52 = phi i32 [ %58, %.preheader ], [ 0, %.preheader.preheader ]
  %53 = phi i8* [ %.lcssa4, %.preheader ], [ %.lcssa5, %.preheader.preheader ]
  %54 = call i64 @CAT_get(i8* noundef %53) #4
  %55 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %54)
  call void @CAT_add(i8* noundef %53, i8* noundef %3, i8* noundef %4) #4
  %56 = call i64 @CAT_get(i8* noundef %53) #4
  %57 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %56)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %58 = add nuw i32 %52, 1
  %59 = icmp eq i32 %58, %43
  br i1 %59, label %.loopexit.loopexit, label %.preheader, !llvm.loop !9


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.loopexit

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit.loopexit:                               ; preds = %.preheader
  br label %.loopexit


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_1.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****
loop

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

25:                                               ; preds = %.loopexit2
  %.lcssa6.lcssa = phi i8* [ %.lcssa6, %.loopexit2 ]
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %60, label %8, !llvm.loop !6
: 
____________________
loop

.preheader3:                                      ; preds = %.preheader3.preheader, %.loopexit2
  %28 = phi i32 [ %38, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %29 = phi i32 [ %37, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa.lcssa, %.preheader3.preheader ]
  %31 = call i32 @llvm.umax.i32(i32 %28, i32 1)
  %32 = call i64 @CAT_get(i8* noundef %30) #4
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %32)
  call void @CAT_add(i8* noundef %30, i8* noundef %3, i8* noundef %4) #4
  %34 = call i64 @CAT_get(i8* noundef %30) #4
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %36 = icmp eq i32 %29, 0
  br i1 %36, label %.loopexit2, label %.preheader1.preheader
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

.loopexit2:                                       ; preds = %.loopexit2.loopexit, %.preheader3
  %37 = add nuw i32 %29, 1
  %38 = add i32 %28, 3
  %39 = icmp eq i32 %37, %9
  br i1 %39, label %25, label %.preheader3, !llvm.loop !7
: 
____________________
loop

.preheader1:                                      ; preds = %.preheader1.preheader, %.loopexit
  %40 = phi i32 [ %50, %.loopexit ], [ 0, %.preheader1.preheader ]
  %41 = phi i32 [ %49, %.loopexit ], [ 0, %.preheader1.preheader ]
  %42 = phi i8* [ %.lcssa5, %.loopexit ], [ %.lcssa6, %.preheader1.preheader ]
  %43 = call i32 @llvm.umax.i32(i32 %40, i32 1)
  %44 = call i64 @CAT_get(i8* noundef %42) #4
  %45 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %44)
  call void @CAT_add(i8* noundef %42, i8* noundef %3, i8* noundef %4) #4
  %46 = call i64 @CAT_get(i8* noundef %42) #4
  %47 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %46)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %48 = icmp eq i32 %41, 0
  br i1 %48, label %.loopexit, label %.preheader.preheader
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

.loopexit:                                        ; preds = %.loopexit.loopexit, %.preheader1
  %49 = add nuw i32 %41, 1
  %50 = add i32 %40, 2
  %51 = icmp eq i32 %49, %31
  br i1 %51, label %.loopexit2.loopexit, label %.preheader1, !llvm.loop !8
: 
____________________
loop

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %52 = phi i32 [ %58, %.preheader ], [ 0, %.preheader.preheader ]
  %53 = phi i8* [ %.lcssa4, %.preheader ], [ %.lcssa5, %.preheader.preheader ]
  %54 = call i64 @CAT_get(i8* noundef %53) #4
  %55 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %54)
  call void @CAT_add(i8* noundef %53, i8* noundef %3, i8* noundef %4) #4
  %56 = call i64 @CAT_get(i8* noundef %53) #4
  %57 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %56)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %58 = add nuw i32 %52, 1
  %59 = icmp eq i32 %58, %43
  br i1 %59, label %.loopexit.loopexit, label %.preheader, !llvm.loop !9
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________
loop

.loopexit.loopexit:                               ; preds = %.preheader
  br label %.loopexit
: 
____________________
loop

.preheader.preheader:                             ; preds = %.preheader1
  br label %.preheader
: 
____________________
loop

.preheader1.preheader:                            ; preds = %.preheader3
  br label %.preheader1
: 
____________________
loop

.loopexit2.loopexit:                              ; preds = %.loopexit
  br label %.loopexit2
: 
____________________
loop

.preheader3.preheader:                            ; preds = %16
  %.lcssa.lcssa = phi i8* [ %.lcssa, %16 ]
  br label %.preheader3
: 
____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa.lcssa = phi i8* [ %.lcssa, %16 ]
phiNode
not falsefind

constantphifound  %.lcssa.lcssa = phi i8* [ %.lcssa, %16 ]  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %.preheader3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

BLOCK AFTER MODIFICATION

.preheader3.preheader:                            ; preds = %16
  br label %.preheader3


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ] 

Instruction
  %28 = phi i32 [ %38, %.loopexit2 ], [ 0, %.preheader3.preheader ]
phiNode
not falsefind

incomingValue:   %38 = add i32 %28, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %29 = phi i32 [ %37, %.loopexit2 ], [ 0, %.preheader3.preheader ]
phiNode
not falsefind

incomingValue:   %37 = add nuw i32 %29, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %31 = call i32 @llvm.umax.i32(i32 %28, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %32 = call i64 @CAT_get(i8* noundef %30) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %32)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %30, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %34 = call i64 @CAT_get(i8* noundef %30) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %36 = icmp eq i32 %29, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %36, label %.loopexit2, label %.preheader1.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3:                                      ; preds = %.preheader3.preheader, %.loopexit2
  %28 = phi i32 [ %38, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %29 = phi i32 [ %37, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ]
  %31 = call i32 @llvm.umax.i32(i32 %28, i32 1)
  %32 = call i64 @CAT_get(i8* noundef %30) #4
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %32)
  call void @CAT_add(i8* noundef %30, i8* noundef %3, i8* noundef %4) #4
  %34 = call i64 @CAT_get(i8* noundef %30) #4
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %36 = icmp eq i32 %29, 0
  br i1 %36, label %.loopexit2, label %.preheader1.preheader


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.preheader3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3.preheader:                            ; preds = %16
  br label %.preheader3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %37 = add nuw i32 %29, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %38 = add i32 %28, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %39 = icmp eq i32 %37, %9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %39, label %25, label %.preheader3, !llvm.loop !7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit2:                                       ; preds = %.loopexit2.loopexit, %.preheader3
  %37 = add nuw i32 %29, 1
  %38 = add i32 %28, 3
  %39 = icmp eq i32 %37, %9
  br i1 %39, label %25, label %.preheader3, !llvm.loop !7


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.preheader1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader1.preheader:                            ; preds = %.preheader3
  br label %.preheader1


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6.lcssa, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %.lcssa6.lcssa = phi i8* [ %.lcssa6, %.loopexit2 ]
phiNode
not falsefind

constantphifound  %.lcssa6.lcssa = phi i8* [ %.lcssa6, %.loopexit2 ]  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp eq i32 %9, %7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %60, label %8, !llvm.loop !6

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4

BLOCK AFTER MODIFICATION

25:                                               ; preds = %.loopexit2
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %60, label %8, !llvm.loop !6


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ] 

Instruction
  %28 = phi i32 [ %38, %.loopexit2 ], [ 0, %.preheader3.preheader ]
phiNode
not falsefind

incomingValue:   %38 = add i32 %28, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %29 = phi i32 [ %37, %.loopexit2 ], [ 0, %.preheader3.preheader ]
phiNode
not falsefind

incomingValue:   %37 = add nuw i32 %29, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %31 = call i32 @llvm.umax.i32(i32 %28, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %32 = call i64 @CAT_get(i8* noundef %30) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %32)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %30, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %34 = call i64 @CAT_get(i8* noundef %30) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %36 = icmp eq i32 %29, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %36, label %.loopexit2, label %.preheader1.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3:                                      ; preds = %.preheader3.preheader, %.loopexit2
  %28 = phi i32 [ %38, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %29 = phi i32 [ %37, %.loopexit2 ], [ 0, %.preheader3.preheader ]
  %30 = phi i8* [ %.lcssa6, %.loopexit2 ], [ %.lcssa, %.preheader3.preheader ]
  %31 = call i32 @llvm.umax.i32(i32 %28, i32 1)
  %32 = call i64 @CAT_get(i8* noundef %30) #4
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %32)
  call void @CAT_add(i8* noundef %30, i8* noundef %3, i8* noundef %4) #4
  %34 = call i64 @CAT_get(i8* noundef %30) #4
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 noundef %34)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %36 = icmp eq i32 %29, 0
  br i1 %36, label %.loopexit2, label %.preheader1.preheader


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4   %42 = phi i8* [ %.lcssa5, %.loopexit ], [ %.lcssa6, %.preheader1.preheader ] 

Instruction
  %40 = phi i32 [ %50, %.loopexit ], [ 0, %.preheader1.preheader ]
phiNode
not falsefind

incomingValue:   %50 = add i32 %40, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %41 = phi i32 [ %49, %.loopexit ], [ 0, %.preheader1.preheader ]
phiNode
not falsefind

incomingValue:   %49 = add nuw i32 %41, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %42 = phi i8* [ %.lcssa5, %.loopexit ], [ %.lcssa6, %.preheader1.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %43 = call i32 @llvm.umax.i32(i32 %40, i32 1)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %44 = call i64 @CAT_get(i8* noundef %42) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %45 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %44)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %42, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %46 = call i64 @CAT_get(i8* noundef %42) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %47 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %46)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %48 = icmp eq i32 %41, 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %48, label %.loopexit, label %.preheader.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader1:                                      ; preds = %.preheader1.preheader, %.loopexit
  %40 = phi i32 [ %50, %.loopexit ], [ 0, %.preheader1.preheader ]
  %41 = phi i32 [ %49, %.loopexit ], [ 0, %.preheader1.preheader ]
  %42 = phi i8* [ %.lcssa5, %.loopexit ], [ %.lcssa6, %.preheader1.preheader ]
  %43 = call i32 @llvm.umax.i32(i32 %40, i32 1)
  %44 = call i64 @CAT_get(i8* noundef %42) #4
  %45 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %44)
  call void @CAT_add(i8* noundef %42, i8* noundef %3, i8* noundef %4) #4
  %46 = call i64 @CAT_get(i8* noundef %42) #4
  %47 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 noundef %46)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %48 = icmp eq i32 %41, 0
  br i1 %48, label %.loopexit, label %.preheader.preheader


NEXTBLOCK

falseFinds
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %17, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

16:                                               ; preds = %8, %16
  %17 = phi i32 [ 0, %8 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %8 ], [ %.lcssa, %16 ]
  %19 = call i64 @CAT_get(i8* noundef %18) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %18, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %.preheader3.preheader, label %16, !llvm.loop !3


NEXTBLOCK


Instruction
  %61 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %61 = call i8* @CAT_new(i64 noundef 52) #4


Instruction
  call void @CAT_set(i8* %61, i64 104)

endofblockkilling:  %61 = call i8* @CAT_new(i64 noundef 52) #4
Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* %61, i64 104)
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_set(i8* %61, i64 0)

endofblockkilling:  call void @CAT_set(i8* %61, i64 104)
Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* %61, i64 0)
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4

endofblockkilling:  call void @CAT_set(i8* %61, i64 0)
Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %62 = call i64 @CAT_variables() #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %63 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %62)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %64 = call i64 @CAT_cost() #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %65 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %64)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  ret i32 0

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

60:                                               ; preds = %25
  %61 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %61, i64 104)
  call void @CAT_set(i8* %61, i64 0)
  call void @CAT_set(i8* noundef %61, i64 noundef 42) #4
  %62 = call i64 @CAT_variables() #4
  %63 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 noundef %62)
  %64 = call i64 @CAT_cost() #4
  %65 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 noundef %64)
  ret i32 0


NEXTBLOCK

falseFinds
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #46->5REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #45->4

Instruction
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
phiNode
not falsefind

incomingValue:   %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %11 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %13 = call i64 @CAT_get(i8* noundef %10) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br label %16

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

8:                                                ; preds = %25, %2
  %9 = phi i32 [ %26, %25 ], [ 1, %2 ]
  %10 = phi i8* [ %.lcssa6, %25 ], [ %5, %2 ]
  %11 = call i64 @CAT_get(i8* noundef %10) #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %11)
  call void @CAT_add(i8* noundef %10, i8* noundef %3, i8* noundef %4) #4
  %13 = call i64 @CAT_get(i8* noundef %10) #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %13)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  br label %16


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %8

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = call i32 @llvm.smax.i32(i32 %0, i32 -1)
  %7 = add i32 %6, 2
  br label %8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %37 = add nuw i32 %29, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %38 = add i32 %28, 3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %39 = icmp eq i32 %37, %9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %39, label %25, label %.preheader3, !llvm.loop !7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit2:                                       ; preds = %.loopexit2.loopexit, %.preheader3
  %37 = add nuw i32 %29, 1
  %38 = add i32 %28, 3
  %39 = icmp eq i32 %37, %9
  br i1 %39, label %25, label %.preheader3, !llvm.loop !7


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.preheader1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader1.preheader:                            ; preds = %.preheader3
  br label %.preheader1


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %49 = add nuw i32 %41, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %50 = add i32 %40, 2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %51 = icmp eq i32 %49, %31

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %51, label %.loopexit2.loopexit, label %.preheader1, !llvm.loop !8

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit:                                        ; preds = %.loopexit.loopexit, %.preheader1
  %49 = add nuw i32 %41, 1
  %50 = add i32 %40, 2
  %51 = icmp eq i32 %49, %31
  br i1 %51, label %.loopexit2.loopexit, label %.preheader1, !llvm.loop !8


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.preheader

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader.preheader:                             ; preds = %.preheader1
  br label %.preheader


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.preheader3

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader3.preheader:                            ; preds = %16
  br label %.preheader3


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %26 = add nuw i32 %9, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp eq i32 %9, %7

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %60, label %8, !llvm.loop !6

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

25:                                               ; preds = %.loopexit2
  %26 = add nuw i32 %9, 1
  %27 = icmp eq i32 %9, %7
  br i1 %27, label %60, label %8, !llvm.loop !6


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.loopexit2

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit2.loopexit:                              ; preds = %.loopexit
  br label %.loopexit2


NEXTBLOCK

falseFinds
  %53 = phi i8* [ %.lcssa4, %.preheader ], [ %.lcssa5, %.preheader.preheader ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  %52 = phi i32 [ %58, %.preheader ], [ 0, %.preheader.preheader ]
phiNode
not falsefind

incomingValue:   %58 = add nuw i32 %52, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %53 = phi i8* [ %.lcssa4, %.preheader ], [ %.lcssa5, %.preheader.preheader ]
phiNode

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %54 = call i64 @CAT_get(i8* noundef %53) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %55 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %54)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %53, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %56 = call i64 @CAT_get(i8* noundef %53) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %57 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %56)

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %58 = add nuw i32 %52, 1

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %59 = icmp eq i32 %58, %43

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %59, label %.loopexit.loopexit, label %.preheader, !llvm.loop !9

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %52 = phi i32 [ %58, %.preheader ], [ 0, %.preheader.preheader ]
  %53 = phi i8* [ %.lcssa4, %.preheader ], [ %.lcssa5, %.preheader.preheader ]
  %54 = call i64 @CAT_get(i8* noundef %53) #4
  %55 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %54)
  call void @CAT_add(i8* noundef %53, i8* noundef %3, i8* noundef %4) #4
  %56 = call i64 @CAT_get(i8* noundef %53) #4
  %57 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 noundef %56)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4
  %58 = add nuw i32 %52, 1
  %59 = icmp eq i32 %58, %43
  br i1 %59, label %.loopexit.loopexit, label %.preheader, !llvm.loop !9


NEXTBLOCK

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 

Instruction
  br label %.loopexit

Constant after instruction
  %15 = call i8* @CAT_new(i64 noundef 1) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %.lcssa = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa6 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa5 = call i8* @CAT_new(i64 noundef 1) #4
  %.lcssa4 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit.loopexit:                               ; preds = %.preheader
  br label %.loopexit


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
  Test failed because output  isn't correct
  Output differences can be found in "diff"
make[1]: *** [Makefile:43: check] Error 1
make[1]: Leaving directory '/home/hwo2853/LLVM/H4/tests/test54'
