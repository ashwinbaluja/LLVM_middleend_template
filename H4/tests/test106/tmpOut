make[1]: Entering directory '/home/hwo2853/LLVM/H4/tests/test106'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  call void @CAT_set(i8* noundef %0, i64 noundef 42) #4

Constant after instruction
  call void @CAT_set(i8* noundef %0, i64 noundef 42) #4


Instruction
  ret void

deleted
  call void @CAT_set(i8* noundef %0, i64 noundef 42) #4

endofblockkilling:  call void @CAT_set(i8* noundef %0, i64 noundef 42) #4
Constant after instruction


BLOCK AFTER MODIFICATION

  call void @CAT_set(i8* noundef %0, i64 noundef 42) #4
  ret void


NEXTBLOCK
loopToBadConstants ****


Instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %5 = icmp eq i32 %0, 0

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br i1 %5, label %7, label %6

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %7, label %6


NEXTBLOCK


Instruction
  %8 = call i64 @CAT_get(i8* noundef %2) #4

optimize Cat_get

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i64 noundef %8)

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %10 = call i64 @CAT_get(i8* noundef %3) #4

optimize Cat_get

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %12 = call i64 @CAT_get(i8* noundef %4) #4

optimize Cat_get

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  ret void

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4
i64 5i64 3i64 0

BLOCK AFTER MODIFICATION

7:                                                ; preds = %6, %1
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i64 noundef 3)
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i64 noundef 0)
  ret void


NEXTBLOCK


Instruction
  call void @f(i8* noundef %2)
erased an instruction cause it was called in a function  %2 = call i8* @CAT_new(i64 noundef 5) #4

endofblockkilling:  %2 = call i8* @CAT_new(i64 noundef 5) #4
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %7

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

6:                                                ; preds = %1
  call void @f(i8* noundef %2)
  br label %7


NEXTBLOCK


Instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %5 = icmp eq i32 %0, 0

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br i1 %5, label %7, label %6

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %7, label %6


NEXTBLOCK
REMOVED

  %2 = call i8* @CAT_new(i64 noundef 5) #43->2

Instruction
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i64 noundef 3)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i64 noundef 0)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  ret void

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

7:                                                ; preds = %6, %1
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i64 noundef 3)
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i64 noundef 0)
  ret void


NEXTBLOCK
loopToBadConstants ****


Instruction
  call void @a_generic_C_function(i32 noundef %0)

Constant after instruction


Instruction
  %3 = call i64 @CAT_variables() #4

Constant after instruction


Instruction
  %4 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i64 noundef %3)

Constant after instruction


Instruction
  %5 = call i64 @CAT_cost() #4

Constant after instruction


Instruction
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i64 noundef %5)

Constant after instruction


Instruction
  ret i32 0

Constant after instruction


BLOCK AFTER MODIFICATION

  call void @a_generic_C_function(i32 noundef %0)
  %3 = call i64 @CAT_variables() #4
  %4 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i64 noundef %3)
  %5 = call i64 @CAT_cost() #4
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i64 noundef %5)
  ret i32 0


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_0.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  call void @CAT_set(i8* noundef %0, i64 noundef 42) #4

Constant after instruction
  call void @CAT_set(i8* noundef %0, i64 noundef 42) #4


Instruction
  ret void

deleted
  call void @CAT_set(i8* noundef %0, i64 noundef 42) #4

endofblockkilling:  call void @CAT_set(i8* noundef %0, i64 noundef 42) #4
Constant after instruction


BLOCK AFTER MODIFICATION

  call void @CAT_set(i8* noundef %0, i64 noundef 42) #4
  ret void


NEXTBLOCK
loopToBadConstants ****


Instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %5 = icmp eq i32 %0, 0

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br i1 %5, label %7, label %6

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %7, label %6


NEXTBLOCK


Instruction
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i64 noundef 3)

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i64 noundef 0)

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  ret void

Constant after instruction
  %2 = call i8* @CAT_new(i64 noundef 5) #4
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

7:                                                ; preds = %6, %1
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i64 noundef 3)
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i64 noundef 0)
  ret void


NEXTBLOCK


Instruction
  call void @f(i8* noundef %2)
erased an instruction cause it was called in a function  %2 = call i8* @CAT_new(i64 noundef 5) #4

endofblockkilling:  %2 = call i8* @CAT_new(i64 noundef 5) #4
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %7

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 3) #4
  %4 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

6:                                                ; preds = %1
  call void @f(i8* noundef %2)
  br label %7


NEXTBLOCK
loopToBadConstants ****


Instruction
  call void @a_generic_C_function(i32 noundef %0)

Constant after instruction


Instruction
  %3 = call i64 @CAT_variables() #4

Constant after instruction


Instruction
  %4 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i64 noundef %3)

Constant after instruction


Instruction
  %5 = call i64 @CAT_cost() #4

Constant after instruction


Instruction
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i64 noundef %5)

Constant after instruction


Instruction
  ret i32 0

Constant after instruction


BLOCK AFTER MODIFICATION

  call void @a_generic_C_function(i32 noundef %0)
  %3 = call i64 @CAT_variables() #4
  %4 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i64 noundef %3)
  %5 = call i64 @CAT_cost() #4
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i64 noundef %5)
  ret i32 0


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
  Test failed because output  isn't correct
  Output differences can be found in "diff"
make[1]: *** [Makefile:43: check] Error 1
make[1]: Leaving directory '/home/hwo2853/LLVM/H4/tests/test106'
