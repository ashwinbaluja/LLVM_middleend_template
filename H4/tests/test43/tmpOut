make[1]: Entering directory '/home/hwo2853/LLVM/H4/tests/test43'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %3 = icmp eq i64 %0, 0

Constant after instruction


Instruction
  br i1 %3, label %4, label %6

Constant after instruction


BLOCK AFTER MODIFICATION

  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6


NEXTBLOCK


Instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %5) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br label %10

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3
2^^^^

BLOCK AFTER MODIFICATION

4:                                                ; preds = %2
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %5) #3
  br label %10


NEXTBLOCK


Instruction
  %7 = add i64 %0, 5

Constant after instruction


Instruction
  %8 = call i8* @CAT_new(i64 noundef %7) #3

Constant after instruction


Instruction
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %8) #3

Constant after instruction


Instruction
  %9 = add i64 %0, -1

Constant after instruction


Instruction
  call void @p(i64 noundef %9, i8* noundef %1)

Constant after instruction


Instruction
  br label %10

Constant after instruction


BLOCK AFTER MODIFICATION

6:                                                ; preds = %2
  %7 = add i64 %0, 5
  %8 = call i8* @CAT_new(i64 noundef %7) #3
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %8) #3
  %9 = add i64 %0, -1
  call void @p(i64 noundef %9, i8* noundef %1)
  br label %10


NEXTBLOCK


Instruction
  ret void

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

10:                                               ; preds = %6, %4
  ret void


NEXTBLOCK
loopToBadConstants ****
loop

10:                                               ; preds = %2, %10
  %11 = phi i64 [ 1, %2 ], [ %14, %10 ]
  call void @p(i64 noundef %11, i8* noundef %3)
  %12 = call i64 @CAT_get(i8* noundef %3) #3
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 noundef %12)
  %14 = add nuw nsw i64 %11, 1
  %15 = icmp eq i64 %14, 6
  br i1 %15, label %4, label %10, !llvm.loop !3
: 
____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3


Instruction
  br label %10

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 7) #3
  br label %10


NEXTBLOCK

falseFinds


Instruction
  %11 = phi i64 [ 1, %2 ], [ %14, %10 ]
phiNode
not falsefind

incomingValue: i64 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3


Instruction
  call void @p(i64 noundef %11, i8* noundef %3)
erased an instruction cause it was called in a function  %3 = call i8* @CAT_new(i64 noundef 7) #3

endofblockkilling:  %3 = call i8* @CAT_new(i64 noundef 7) #3
Constant after instruction


Instruction
  %12 = call i64 @CAT_get(i8* noundef %3) #3

Constant after instruction


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 noundef %12)

Constant after instruction


Instruction
  %14 = add nuw nsw i64 %11, 1

Constant after instruction


Instruction
  %15 = icmp eq i64 %14, 6

Constant after instruction


Instruction
  br i1 %15, label %4, label %10, !llvm.loop !3

Constant after instruction


BLOCK AFTER MODIFICATION

10:                                               ; preds = %2, %10
  %11 = phi i64 [ 1, %2 ], [ %14, %10 ]
  call void @p(i64 noundef %11, i8* noundef %3)
  %12 = call i64 @CAT_get(i8* noundef %3) #3
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 noundef %12)
  %14 = add nuw nsw i64 %11, 1
  %15 = icmp eq i64 %14, 6
  br i1 %15, label %4, label %10, !llvm.loop !3


NEXTBLOCK


Instruction
  %5 = call i8* @CAT_new(i64 noundef 52) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 52) #3


Instruction
  call void @CAT_add(i8* noundef %5, i8* noundef %5, i8* noundef %5) #3

endofblockkilling:  %5 = call i8* @CAT_new(i64 noundef 52) #3
Constant after instruction


Instruction
  call void @CAT_sub(i8* noundef %5, i8* noundef %5, i8* noundef %5) #3

Constant after instruction


Instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %6 = call i64 @CAT_variables() #3

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %6)

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %8 = call i64 @CAT_cost() #3

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %8)

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


BLOCK AFTER MODIFICATION

4:                                                ; preds = %10
  %5 = call i8* @CAT_new(i64 noundef 52) #3
  call void @CAT_set(i8* %5, i64 104)
  call void @CAT_sub(i8* noundef %5, i8* noundef %5, i8* noundef %5) #3
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3
  %6 = call i64 @CAT_variables() #3
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %6)
  %8 = call i64 @CAT_cost() #3
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %8)
  ret i32 0


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_0.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %3 = icmp eq i64 %0, 0

Constant after instruction


Instruction
  br i1 %3, label %4, label %6

Constant after instruction


BLOCK AFTER MODIFICATION

  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6


NEXTBLOCK


Instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %5) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br label %10

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3
2^^^^

BLOCK AFTER MODIFICATION

4:                                                ; preds = %2
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %5) #3
  br label %10


NEXTBLOCK


Instruction
  %7 = add i64 %0, 5

Constant after instruction


Instruction
  %8 = call i8* @CAT_new(i64 noundef %7) #3

Constant after instruction


Instruction
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %8) #3

Constant after instruction


Instruction
  %9 = add i64 %0, -1

Constant after instruction


Instruction
  call void @p(i64 noundef %9, i8* noundef %1)

Constant after instruction


Instruction
  br label %10

Constant after instruction


BLOCK AFTER MODIFICATION

6:                                                ; preds = %2
  %7 = add i64 %0, 5
  %8 = call i8* @CAT_new(i64 noundef %7) #3
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %8) #3
  %9 = add i64 %0, -1
  call void @p(i64 noundef %9, i8* noundef %1)
  br label %10


NEXTBLOCK


Instruction
  ret void

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

10:                                               ; preds = %6, %4
  ret void


NEXTBLOCK
loopToBadConstants ****
loop

10:                                               ; preds = %2, %10
  %11 = phi i64 [ 1, %2 ], [ %14, %10 ]
  call void @p(i64 noundef %11, i8* noundef %3)
  %12 = call i64 @CAT_get(i8* noundef %3) #3
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 noundef %12)
  %14 = add nuw nsw i64 %11, 1
  %15 = icmp eq i64 %14, 6
  br i1 %15, label %4, label %10, !llvm.loop !3
: 
____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3


Instruction
  br label %10

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 7) #3
  br label %10


NEXTBLOCK

falseFinds


Instruction
  %11 = phi i64 [ 1, %2 ], [ %14, %10 ]
phiNode
not falsefind

incomingValue: i64 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3


Instruction
  call void @p(i64 noundef %11, i8* noundef %3)
erased an instruction cause it was called in a function  %3 = call i8* @CAT_new(i64 noundef 7) #3

endofblockkilling:  %3 = call i8* @CAT_new(i64 noundef 7) #3
Constant after instruction


Instruction
  %12 = call i64 @CAT_get(i8* noundef %3) #3

Constant after instruction


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 noundef %12)

Constant after instruction


Instruction
  %14 = add nuw nsw i64 %11, 1

Constant after instruction


Instruction
  %15 = icmp eq i64 %14, 6

Constant after instruction


Instruction
  br i1 %15, label %4, label %10, !llvm.loop !3

Constant after instruction


BLOCK AFTER MODIFICATION

10:                                               ; preds = %2, %10
  %11 = phi i64 [ 1, %2 ], [ %14, %10 ]
  call void @p(i64 noundef %11, i8* noundef %3)
  %12 = call i64 @CAT_get(i8* noundef %3) #3
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 noundef %12)
  %14 = add nuw nsw i64 %11, 1
  %15 = icmp eq i64 %14, 6
  br i1 %15, label %4, label %10, !llvm.loop !3


NEXTBLOCK


Instruction
  %5 = call i8* @CAT_new(i64 noundef 52) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 52) #3


Instruction
  call void @CAT_set(i8* %5, i64 104)

endofblockkilling:  %5 = call i8* @CAT_new(i64 noundef 52) #3
Constant after instruction
  call void @CAT_set(i8* %5, i64 104)


Instruction
  call void @CAT_sub(i8* noundef %5, i8* noundef %5, i8* noundef %5) #3

endofblockkilling:  call void @CAT_set(i8* %5, i64 104)
Constant after instruction


Instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %6 = call i64 @CAT_variables() #3

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %6)

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %8 = call i64 @CAT_cost() #3

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %8)

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


BLOCK AFTER MODIFICATION

4:                                                ; preds = %10
  %5 = call i8* @CAT_new(i64 noundef 52) #3
  call void @CAT_set(i8* %5, i64 104)
  call void @CAT_set(i8* %5, i64 0)
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3
  %6 = call i64 @CAT_variables() #3
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %6)
  %8 = call i64 @CAT_cost() #3
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %8)
  ret i32 0


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_1.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %3 = icmp eq i64 %0, 0

Constant after instruction


Instruction
  br i1 %3, label %4, label %6

Constant after instruction


BLOCK AFTER MODIFICATION

  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6


NEXTBLOCK


Instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %5) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br label %10

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3
2^^^^

BLOCK AFTER MODIFICATION

4:                                                ; preds = %2
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %5) #3
  br label %10


NEXTBLOCK


Instruction
  %7 = add i64 %0, 5

Constant after instruction


Instruction
  %8 = call i8* @CAT_new(i64 noundef %7) #3

Constant after instruction


Instruction
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %8) #3

Constant after instruction


Instruction
  %9 = add i64 %0, -1

Constant after instruction


Instruction
  call void @p(i64 noundef %9, i8* noundef %1)

Constant after instruction


Instruction
  br label %10

Constant after instruction


BLOCK AFTER MODIFICATION

6:                                                ; preds = %2
  %7 = add i64 %0, 5
  %8 = call i8* @CAT_new(i64 noundef %7) #3
  call void @CAT_add(i8* noundef %1, i8* noundef %1, i8* noundef %8) #3
  %9 = add i64 %0, -1
  call void @p(i64 noundef %9, i8* noundef %1)
  br label %10


NEXTBLOCK


Instruction
  ret void

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

10:                                               ; preds = %6, %4
  ret void


NEXTBLOCK
loopToBadConstants ****
loop

10:                                               ; preds = %2, %10
  %11 = phi i64 [ 1, %2 ], [ %14, %10 ]
  call void @p(i64 noundef %11, i8* noundef %3)
  %12 = call i64 @CAT_get(i8* noundef %3) #3
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 noundef %12)
  %14 = add nuw nsw i64 %11, 1
  %15 = icmp eq i64 %14, 6
  br i1 %15, label %4, label %10, !llvm.loop !3
: 
____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3


Instruction
  br label %10

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 7) #3
  br label %10


NEXTBLOCK

falseFinds


Instruction
  %11 = phi i64 [ 1, %2 ], [ %14, %10 ]
phiNode
not falsefind

incomingValue: i64 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 7) #3


Instruction
  call void @p(i64 noundef %11, i8* noundef %3)
erased an instruction cause it was called in a function  %3 = call i8* @CAT_new(i64 noundef 7) #3

endofblockkilling:  %3 = call i8* @CAT_new(i64 noundef 7) #3
Constant after instruction


Instruction
  %12 = call i64 @CAT_get(i8* noundef %3) #3

Constant after instruction


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 noundef %12)

Constant after instruction


Instruction
  %14 = add nuw nsw i64 %11, 1

Constant after instruction


Instruction
  %15 = icmp eq i64 %14, 6

Constant after instruction


Instruction
  br i1 %15, label %4, label %10, !llvm.loop !3

Constant after instruction


BLOCK AFTER MODIFICATION

10:                                               ; preds = %2, %10
  %11 = phi i64 [ 1, %2 ], [ %14, %10 ]
  call void @p(i64 noundef %11, i8* noundef %3)
  %12 = call i64 @CAT_get(i8* noundef %3) #3
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 noundef %12)
  %14 = add nuw nsw i64 %11, 1
  %15 = icmp eq i64 %14, 6
  br i1 %15, label %4, label %10, !llvm.loop !3


NEXTBLOCK


Instruction
  %5 = call i8* @CAT_new(i64 noundef 52) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 52) #3


Instruction
  call void @CAT_set(i8* %5, i64 104)

endofblockkilling:  %5 = call i8* @CAT_new(i64 noundef 52) #3
Constant after instruction
  call void @CAT_set(i8* %5, i64 104)


Instruction
  call void @CAT_set(i8* %5, i64 0)

endofblockkilling:  call void @CAT_set(i8* %5, i64 104)
Constant after instruction
  call void @CAT_set(i8* %5, i64 0)


Instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3

endofblockkilling:  call void @CAT_set(i8* %5, i64 0)
Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %6 = call i64 @CAT_variables() #3

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %6)

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %8 = call i64 @CAT_cost() #3

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %8)

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3


BLOCK AFTER MODIFICATION

4:                                                ; preds = %10
  %5 = call i8* @CAT_new(i64 noundef 52) #3
  call void @CAT_set(i8* %5, i64 104)
  call void @CAT_set(i8* %5, i64 0)
  call void @CAT_set(i8* noundef %5, i64 noundef 42) #3
  %6 = call i64 @CAT_variables() #3
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %6)
  %8 = call i64 @CAT_cost() #3
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %8)
  ret i32 0


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
Test passed!
make[1]: Leaving directory '/home/hwo2853/LLVM/H4/tests/test43'
