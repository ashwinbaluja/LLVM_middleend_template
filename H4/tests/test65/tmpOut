make[1]: Entering directory '/home/hwo2853/LLVM/H4/tests/test65'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****
loop

11:                                               ; preds = %2, %11
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]
  %13 = phi i32 [ 0, %2 ], [ %24, %11 ]
  %14 = call i64 @CAT_get(i8* noundef %12) #4
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %14)
  call void @CAT_add(i8* noundef %12, i8* noundef %3, i8* noundef %4) #4
  %16 = call i64 @CAT_get(i8* noundef %12) #4
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %16)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4
  %19 = call i32 @rand() #5
  %20 = sext i32 %19 to i64
  call void @CAT_set(i8* noundef %12, i64 noundef %20) #4
  %21 = call i64 @CAT_get(i8* noundef %18) #4
  %22 = call i64 @CAT_get(i8* noundef %12) #4
  %23 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21, i64 noundef %22)
  %24 = add nuw nsw i32 %13, 1
  %25 = icmp eq i32 %24, 10
  br i1 %25, label %6, label %11, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %11

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  br label %11


NEXTBLOCK

falseFinds
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %13 = phi i32 [ 0, %2 ], [ %24, %11 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %14 = call i64 @CAT_get(i8* noundef %12) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %14)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %12, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %16 = call i64 @CAT_get(i8* noundef %12) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %16)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %18 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i32 @rand() #5

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = sext i32 %19 to i64

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_set(i8* noundef %12, i64 noundef %20) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %18) #4

optimize Cat_get

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i64 @CAT_get(i8* noundef %12) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21, i64 noundef %22)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = add nuw nsw i32 %13, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %25 = icmp eq i32 %24, 10

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %25, label %6, label %11, !llvm.loop !3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4
i64 1

BLOCK AFTER MODIFICATION

11:                                               ; preds = %2, %11
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]
  %13 = phi i32 [ 0, %2 ], [ %23, %11 ]
  %14 = call i64 @CAT_get(i8* noundef %12) #4
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %14)
  call void @CAT_add(i8* noundef %12, i8* noundef %3, i8* noundef %4) #4
  %16 = call i64 @CAT_get(i8* noundef %12) #4
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %16)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4
  %19 = call i32 @rand() #5
  %20 = sext i32 %19 to i64
  call void @CAT_set(i8* noundef %12, i64 noundef %20) #4
  %21 = call i64 @CAT_get(i8* noundef %12) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 noundef 1, i64 noundef %21)
  %23 = add nuw nsw i32 %13, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %6, label %11, !llvm.loop !3


NEXTBLOCK


Instruction
  %7 = call i64 @CAT_variables() #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %9 = call i64 @CAT_cost() #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i64 noundef %9)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  ret i32 0

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

6:                                                ; preds = %11
  %7 = call i64 @CAT_variables() #4
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)
  %9 = call i64 @CAT_cost() #4
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i64 noundef %9)
  ret i32 0


NEXTBLOCK

falseFinds
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #44->3REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #43->2

Instruction
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %13 = phi i32 [ 0, %2 ], [ %23, %11 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %14 = call i64 @CAT_get(i8* noundef %12) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %14)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %12, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %16 = call i64 @CAT_get(i8* noundef %12) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %16)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %18 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i32 @rand() #5

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = sext i32 %19 to i64

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_set(i8* noundef %12, i64 noundef %20) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %12) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 noundef 1, i64 noundef %21)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %13, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %6, label %11, !llvm.loop !3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

11:                                               ; preds = %2, %11
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]
  %13 = phi i32 [ 0, %2 ], [ %23, %11 ]
  %14 = call i64 @CAT_get(i8* noundef %12) #4
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %14)
  call void @CAT_add(i8* noundef %12, i8* noundef %3, i8* noundef %4) #4
  %16 = call i64 @CAT_get(i8* noundef %12) #4
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %16)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4
  %19 = call i32 @rand() #5
  %20 = sext i32 %19 to i64
  call void @CAT_set(i8* noundef %12, i64 noundef %20) #4
  %21 = call i64 @CAT_get(i8* noundef %12) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 noundef 1, i64 noundef %21)
  %23 = add nuw nsw i32 %13, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %6, label %11, !llvm.loop !3


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %11

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  br label %11


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_0.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****
loop

11:                                               ; preds = %2, %11
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]
  %13 = phi i32 [ 0, %2 ], [ %23, %11 ]
  %14 = call i64 @CAT_get(i8* noundef %12) #4
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %14)
  call void @CAT_add(i8* noundef %12, i8* noundef %3, i8* noundef %4) #4
  %16 = call i64 @CAT_get(i8* noundef %12) #4
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %16)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4
  %19 = call i32 @rand() #5
  %20 = sext i32 %19 to i64
  call void @CAT_set(i8* noundef %12, i64 noundef %20) #4
  %21 = call i64 @CAT_get(i8* noundef %12) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 noundef 1, i64 noundef %21)
  %23 = add nuw nsw i32 %13, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %6, label %11, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br label %11

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  br label %11


NEXTBLOCK

falseFinds
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %13 = phi i32 [ 0, %2 ], [ %23, %11 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %14 = call i64 @CAT_get(i8* noundef %12) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %14)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %12, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %16 = call i64 @CAT_get(i8* noundef %12) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %16)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %18 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %19 = call i32 @rand() #5

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %20 = sext i32 %19 to i64

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  call void @CAT_set(i8* noundef %12, i64 noundef %20) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %12) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 noundef 1, i64 noundef %21)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %23 = add nuw nsw i32 %13, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = icmp eq i32 %23, 10

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %24, label %6, label %11, !llvm.loop !3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

11:                                               ; preds = %2, %11
  %12 = phi i8* [ %5, %2 ], [ %18, %11 ]
  %13 = phi i32 [ 0, %2 ], [ %23, %11 ]
  %14 = call i64 @CAT_get(i8* noundef %12) #4
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %14)
  call void @CAT_add(i8* noundef %12, i8* noundef %3, i8* noundef %4) #4
  %16 = call i64 @CAT_get(i8* noundef %12) #4
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %16)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4
  %19 = call i32 @rand() #5
  %20 = sext i32 %19 to i64
  call void @CAT_set(i8* noundef %12, i64 noundef %20) #4
  %21 = call i64 @CAT_get(i8* noundef %12) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 noundef 1, i64 noundef %21)
  %23 = add nuw nsw i32 %13, 1
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %6, label %11, !llvm.loop !3


NEXTBLOCK


Instruction
  %7 = call i64 @CAT_variables() #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %9 = call i64 @CAT_cost() #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i64 noundef %9)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  ret i32 0

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %18 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

6:                                                ; preds = %11
  %7 = call i64 @CAT_variables() #4
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)
  %9 = call i64 @CAT_cost() #4
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i64 noundef %9)
  ret i32 0


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
Test passed!
make[1]: Leaving directory '/home/hwo2853/LLVM/H4/tests/test65'
