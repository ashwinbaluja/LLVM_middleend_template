make[1]: Entering directory '/home/hwo2853/LLVM/H4/tests/test36'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %3 = icmp eq i8* %0, null

Constant after instruction


Instruction
  %4 = add nsw i32 %1, 1

Constant after instruction


Instruction
  %5 = select i1 %3, i32 %4, i32 0

Constant after instruction


Instruction
  ret i32 %5

Constant after instruction


BLOCK AFTER MODIFICATION

  %3 = icmp eq i8* %0, null
  %4 = add nsw i32 %1, 1
  %5 = select i1 %3, i32 %4, i32 0
  ret i32 %5


NEXTBLOCK
loopToBadConstants ****


Instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %4 = icmp eq i8* %3, null

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %5 = add nsw i32 %0, 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %6 = call i64 @CAT_get(i8* noundef %3) #4

optimize Cat_get

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %7 = sext i32 %5 to i64

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %8 = select i1 %4, i64 %7, i64 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %9 = add nsw i64 %8, %6

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 noundef %9)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %11 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  %11 = call i8* @CAT_new(i64 noundef 52) #4


Instruction
  call void @CAT_add(i8* noundef %11, i8* noundef %11, i8* noundef %11) #4

endofblockkilling:  %11 = call i8* @CAT_new(i64 noundef 52) #4
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  call void @CAT_sub(i8* noundef %11, i8* noundef %11, i8* noundef %11) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  call void @CAT_set(i8* noundef %11, i64 noundef 42) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %11, i64 noundef 42) #4


Instruction
  %12 = call i64 @CAT_variables() #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %11, i64 noundef 42) #4


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %12)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %11, i64 noundef 42) #4


Instruction
  %14 = call i64 @CAT_cost() #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %11, i64 noundef 42) #4


Instruction
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %14)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %11, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %11, i64 noundef 42) #4
i64 5

BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 5) #4
  %4 = icmp eq i8* %3, null
  %5 = add nsw i32 %0, 1
  %6 = sext i32 %5 to i64
  %7 = select i1 %4, i64 %6, i64 0
  %8 = add nsw i64 %7, 5
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 noundef %8)
  %10 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %10, i64 104)
  call void @CAT_sub(i8* noundef %10, i8* noundef %10, i8* noundef %10) #4
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4
  %11 = call i64 @CAT_variables() #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %11)
  %13 = call i64 @CAT_cost() #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %13)
  ret i32 0


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %4 = icmp eq i8* %3, null

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %5 = add nsw i32 %0, 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %6 = sext i32 %5 to i64

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %7 = select i1 %4, i64 %6, i64 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %8 = add nsw i64 %7, 5

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 noundef %8)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %10 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  %10 = call i8* @CAT_new(i64 noundef 52) #4


Instruction
  call void @CAT_set(i8* %10, i64 104)

endofblockkilling:  call void @CAT_set(i8* %10, i64 104)
endofblockkilling:  %3 = call i8* @CAT_new(i64 noundef 5) #4
endofblockkilling:  %10 = call i8* @CAT_new(i64 noundef 52) #4
Constant after instruction


Instruction
  call void @CAT_sub(i8* noundef %10, i8* noundef %10, i8* noundef %10) #4

Constant after instruction


Instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4


Instruction
  %11 = call i64 @CAT_variables() #4

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4


Instruction
  %13 = call i64 @CAT_cost() #4

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 5) #4
  %4 = icmp eq i8* %3, null
  %5 = add nsw i32 %0, 1
  %6 = sext i32 %5 to i64
  %7 = select i1 %4, i64 %6, i64 0
  %8 = add nsw i64 %7, 5
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 noundef %8)
  %10 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %10, i64 104)
  call void @CAT_sub(i8* noundef %10, i8* noundef %10, i8* noundef %10) #4
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4
  %11 = call i64 @CAT_variables() #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %11)
  %13 = call i64 @CAT_cost() #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %13)
  ret i32 0


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_0.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %3 = icmp eq i8* %0, null

Constant after instruction


Instruction
  %4 = add nsw i32 %1, 1

Constant after instruction


Instruction
  %5 = select i1 %3, i32 %4, i32 0

Constant after instruction


Instruction
  ret i32 %5

Constant after instruction


BLOCK AFTER MODIFICATION

  %3 = icmp eq i8* %0, null
  %4 = add nsw i32 %1, 1
  %5 = select i1 %3, i32 %4, i32 0
  ret i32 %5


NEXTBLOCK
loopToBadConstants ****


Instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %4 = icmp eq i8* %3, null

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %5 = sext i32 %0 to i64

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %.op = add nsw i64 %5, 6

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %6 = select i1 %4, i64 %.op, i64 5

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 noundef %6)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %8 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  %8 = call i8* @CAT_new(i64 noundef 52) #4


Instruction
  call void @CAT_set(i8* %8, i64 104)

endofblockkilling:  %8 = call i8* @CAT_new(i64 noundef 52) #4
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* %8, i64 104)


Instruction
  call void @CAT_sub(i8* noundef %8, i8* noundef %8, i8* noundef %8) #4

endofblockkilling:  call void @CAT_set(i8* %8, i64 104)
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


Instruction
  %9 = call i64 @CAT_variables() #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


Instruction
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %9)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


Instruction
  %11 = call i64 @CAT_cost() #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 5) #4
  %4 = icmp eq i8* %3, null
  %5 = sext i32 %0 to i64
  %.op = add nsw i64 %5, 6
  %6 = select i1 %4, i64 %.op, i64 5
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 noundef %6)
  %8 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %8, i64 104)
  call void @CAT_set(i8* %8, i64 0)
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4
  %9 = call i64 @CAT_variables() #4
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %9)
  %11 = call i64 @CAT_cost() #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %11)
  ret i32 0


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_1.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %3 = icmp eq i8* %0, null

Constant after instruction


Instruction
  %4 = add nsw i32 %1, 1

Constant after instruction


Instruction
  %5 = select i1 %3, i32 %4, i32 0

Constant after instruction


Instruction
  ret i32 %5

Constant after instruction


BLOCK AFTER MODIFICATION

  %3 = icmp eq i8* %0, null
  %4 = add nsw i32 %1, 1
  %5 = select i1 %3, i32 %4, i32 0
  ret i32 %5


NEXTBLOCK
loopToBadConstants ****


Instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %4 = icmp eq i8* %3, null

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %5 = sext i32 %0 to i64

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %.op = add nsw i64 %5, 6

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %6 = select i1 %4, i64 %.op, i64 5

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 noundef %6)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %8 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  %8 = call i8* @CAT_new(i64 noundef 52) #4


Instruction
  call void @CAT_set(i8* %8, i64 104)

endofblockkilling:  %8 = call i8* @CAT_new(i64 noundef 52) #4
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* %8, i64 104)


Instruction
  call void @CAT_set(i8* %8, i64 0)

endofblockkilling:  call void @CAT_set(i8* %8, i64 104)
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* %8, i64 0)


Instruction
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4

endofblockkilling:  call void @CAT_set(i8* %8, i64 0)
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


Instruction
  %9 = call i64 @CAT_variables() #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


Instruction
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %9)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


Instruction
  %11 = call i64 @CAT_cost() #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #4
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 5) #4
  %4 = icmp eq i8* %3, null
  %5 = sext i32 %0 to i64
  %.op = add nsw i64 %5, 6
  %6 = select i1 %4, i64 %.op, i64 5
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 noundef %6)
  %8 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %8, i64 104)
  call void @CAT_set(i8* %8, i64 0)
  call void @CAT_set(i8* noundef %8, i64 noundef 42) #4
  %9 = call i64 @CAT_variables() #4
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %9)
  %11 = call i64 @CAT_cost() #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %11)
  ret i32 0


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
Test passed!
make[1]: Leaving directory '/home/hwo2853/LLVM/H4/tests/test36'
