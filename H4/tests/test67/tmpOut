make[1]: Entering directory '/home/hwo2853/LLVM/H4/tests/test67'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3


Instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %6 = icmp sgt i32 %0, 100

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br i1 %6, label %7, label %9

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %6 = icmp sgt i32 %0, 100
  br i1 %6, label %7, label %9


NEXTBLOCK


Instruction
  %8 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br label %9

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

7:                                                ; preds = %2
  %8 = call i8* @CAT_new(i64 noundef 1) #3
  br label %9


NEXTBLOCK


Instruction
  %10 = phi i8* [ %8, %7 ], [ %5, %2 ]
phiNode
not falsefind

incomingValue:   %8 = call i8* @CAT_new(i64 noundef 1) #3
incomingConstant: i64 1
incomingValue:   %5 = call i8* @CAT_new(i64 noundef 1) #3
incomingConstant: i64 1
constant: i64 1
constantphifoundHERE  %10 = phi i8* [ %8, %7 ], [ %5, %2 ]i64 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %11 = sext i32 %0 to i64

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_set(i8* noundef %5, i64 noundef %11) #3

endofblockkilling:  %5 = call i8* @CAT_new(i64 noundef 1) #3
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %12 = call i64 @CAT_get(i8* noundef %10) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %13 = call i64 @CAT_get(i8* noundef %5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 noundef %12, i64 noundef %13)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %15 = call i64 @CAT_variables() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %15)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %17 = call i64 @CAT_cost() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %17)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3

BLOCK AFTER MODIFICATION

9:                                                ; preds = %7, %2
  %10 = sext i32 %0 to i64
  call void @CAT_set(i8* noundef %5, i64 noundef %10) #3
  %11 = call i64 @CAT_get(i8* noundef %8) #3
  %12 = call i64 @CAT_get(i8* noundef %5) #3
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 noundef %11, i64 noundef %12)
  %14 = call i64 @CAT_variables() #3
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %14)
  %16 = call i64 @CAT_cost() #3
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %16)
  ret i32 0


NEXTBLOCK


Instruction
  %10 = sext i32 %0 to i64

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_set(i8* noundef %5, i64 noundef %10) #3

endofblockkilling:  %5 = call i8* @CAT_new(i64 noundef 1) #3
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %11 = call i64 @CAT_get(i8* noundef %8) #3

optimize Cat_get

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %12 = call i64 @CAT_get(i8* noundef %5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 noundef %11, i64 noundef %12)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %14 = call i64 @CAT_variables() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %14)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %16 = call i64 @CAT_cost() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %16)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3
i64 1

BLOCK AFTER MODIFICATION

9:                                                ; preds = %7, %2
  %10 = sext i32 %0 to i64
  call void @CAT_set(i8* noundef %5, i64 noundef %10) #3
  %11 = call i64 @CAT_get(i8* noundef %5) #3
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 noundef 1, i64 noundef %11)
  %13 = call i64 @CAT_variables() #3
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %13)
  %15 = call i64 @CAT_cost() #3
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %15)
  ret i32 0


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3


Instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %6 = icmp sgt i32 %0, 100

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br i1 %6, label %7, label %9

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %6 = icmp sgt i32 %0, 100
  br i1 %6, label %7, label %9


NEXTBLOCK


Instruction
  %8 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br label %9

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

7:                                                ; preds = %2
  %8 = call i8* @CAT_new(i64 noundef 1) #3
  br label %9


NEXTBLOCK


Instruction
  %10 = sext i32 %0 to i64

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_set(i8* noundef %5, i64 noundef %10) #3

endofblockkilling:  %5 = call i8* @CAT_new(i64 noundef 1) #3
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %11 = call i64 @CAT_get(i8* noundef %5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 noundef 1, i64 noundef %11)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %13 = call i64 @CAT_variables() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %15 = call i64 @CAT_cost() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %15)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

9:                                                ; preds = %7, %2
  %10 = sext i32 %0 to i64
  call void @CAT_set(i8* noundef %5, i64 noundef %10) #3
  %11 = call i64 @CAT_get(i8* noundef %5) #3
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 noundef 1, i64 noundef %11)
  %13 = call i64 @CAT_variables() #3
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %13)
  %15 = call i64 @CAT_cost() #3
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %15)
  ret i32 0


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_0.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3


Instruction
  %5 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %6 = icmp sgt i32 %0, 100

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br i1 %6, label %7, label %9

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %6 = icmp sgt i32 %0, 100
  br i1 %6, label %7, label %9


NEXTBLOCK


Instruction
  %8 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br label %9

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

7:                                                ; preds = %2
  %8 = call i8* @CAT_new(i64 noundef 1) #3
  br label %9


NEXTBLOCK


Instruction
  %10 = sext i32 %0 to i64

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 1) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_set(i8* noundef %5, i64 noundef %10) #3

endofblockkilling:  %5 = call i8* @CAT_new(i64 noundef 1) #3
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %11 = call i64 @CAT_get(i8* noundef %5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 noundef 1, i64 noundef %11)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %13 = call i64 @CAT_variables() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %15 = call i64 @CAT_cost() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %15)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %8 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

9:                                                ; preds = %7, %2
  %10 = sext i32 %0 to i64
  call void @CAT_set(i8* noundef %5, i64 noundef %10) #3
  %11 = call i64 @CAT_get(i8* noundef %5) #3
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 noundef 1, i64 noundef %11)
  %13 = call i64 @CAT_variables() #3
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %13)
  %15 = call i64 @CAT_cost() #3
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %15)
  ret i32 0


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
Test passed!
make[1]: Leaving directory '/home/hwo2853/LLVM/H4/tests/test67'
