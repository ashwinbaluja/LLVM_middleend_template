make[1]: Entering directory '/home/hwo2853/LLVM/H4/tests/test61'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****
loop

4:                                                ; preds = %4, %2
  %5 = phi i8* [ %3, %2 ], [ %9, %4 ]
  %6 = phi i32 [ 0, %2 ], [ %10, %4 ]
  %7 = call i64 @CAT_get(i8* noundef %5) #3
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef %7)
  call void @CAT_set(i8* noundef %5, i64 noundef 3) #3
  %9 = call i8* @CAT_new(i64 noundef 5) #3
  %10 = add nuw nsw i32 %6, 1
  %11 = icmp eq i32 %10, 100
  br i1 %11, label %12, label %4, !llvm.loop !3
: 
____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  br label %4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 5) #3
  br label %4


NEXTBLOCK

falseFinds


Instruction
  %5 = phi i8* [ %3, %2 ], [ %9, %4 ]
phiNode
not falsefind

incomingValue:   %3 = call i8* @CAT_new(i64 noundef 5) #3
incomingConstant: i64 5
incomingValue:   %9 = call i8* @CAT_new(i64 noundef 5) #3
incomingConstant: i64 5
constant: i64 5
constantphifoundHERE  %5 = phi i8* [ %3, %2 ], [ %9, %4 ]i64 5

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %6 = phi i32 [ 0, %2 ], [ %10, %4 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %7 = call i64 @CAT_get(i8* noundef %5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef %7)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  call void @CAT_set(i8* noundef %5, i64 noundef 3) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %5, i64 noundef 3) #3


Instruction
  %9 = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %5, i64 noundef 3) #3
  %9 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %10 = add nuw nsw i32 %6, 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %5, i64 noundef 3) #3
  %9 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %11 = icmp eq i32 %10, 100

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %5, i64 noundef 3) #3
  %9 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  br i1 %11, label %12, label %4, !llvm.loop !3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %5, i64 noundef 3) #3
  %9 = call i8* @CAT_new(i64 noundef 5) #3
  %3 = call i8* @CAT_new(i64 noundef 5) #3

BLOCK AFTER MODIFICATION

4:                                                ; preds = %4, %2
  %5 = phi i32 [ 0, %2 ], [ %9, %4 ]
  %6 = call i64 @CAT_get(i8* noundef %3) #3
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef %6)
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %8 = call i8* @CAT_new(i64 noundef 5) #3
  %9 = add nuw nsw i32 %5, 1
  %10 = icmp eq i32 %9, 100
  br i1 %10, label %11, label %4, !llvm.loop !3


NEXTBLOCK


Instruction
  %.lcssa = phi i8* [ %8, %4 ]
phiNode
not falsefind

constantphifound  %.lcssa = phi i8* [ %8, %4 ]  %8 = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %8 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  call void @CAT_add(i8* noundef %.lcssa, i8* noundef %.lcssa, i8* noundef %.lcssa) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %8 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  call void @CAT_sub(i8* noundef %.lcssa, i8* noundef %.lcssa, i8* noundef %.lcssa) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %8 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %12 = call i64 @CAT_variables() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %8 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %12)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %8 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %14 = call i64 @CAT_cost() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %8 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %14)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %8 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %8 = call i8* @CAT_new(i64 noundef 5) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3

BLOCK AFTER MODIFICATION

10:                                               ; preds = %4
  call void @CAT_add(i8* noundef %.lcssa, i8* noundef %.lcssa, i8* noundef %.lcssa) #3
  call void @CAT_sub(i8* noundef %.lcssa, i8* noundef %.lcssa, i8* noundef %.lcssa) #3
  %11 = call i64 @CAT_variables() #3
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %11)
  %13 = call i64 @CAT_cost() #3
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %13)
  ret i32 0


NEXTBLOCK

falseFinds


Instruction
  %5 = phi i32 [ 0, %2 ], [ %8, %4 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %6 = call i64 @CAT_get(i8* noundef %3) #3

optimize Cat_get

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef %6)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %8 = add nuw nsw i32 %5, 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %9 = icmp eq i32 %8, 100

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  br i1 %9, label %10, label %4, !llvm.loop !3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
i64 5

BLOCK AFTER MODIFICATION

4:                                                ; preds = %4, %2
  %5 = phi i32 [ 0, %2 ], [ %7, %4 ]
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  %7 = add nuw nsw i32 %5, 1
  %8 = icmp eq i32 %7, 100
  br i1 %8, label %9, label %4, !llvm.loop !3


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  br label %4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 5) #3
  br label %4


NEXTBLOCK


Instruction
  call void @CAT_add(i8* noundef %.lcssa, i8* noundef %.lcssa, i8* noundef %.lcssa) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  call void @CAT_sub(i8* noundef %.lcssa, i8* noundef %.lcssa, i8* noundef %.lcssa) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %10 = call i64 @CAT_variables() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %12 = call i64 @CAT_cost() #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


BLOCK AFTER MODIFICATION

9:                                                ; preds = %4
  call void @CAT_set(i8* %.lcssa, i64 10)
  call void @CAT_set(i8* %.lcssa, i64 0)
  %10 = call i64 @CAT_variables() #3
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)
  %12 = call i64 @CAT_cost() #3
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)
  ret i32 0


NEXTBLOCK

falseFinds


Instruction
  %5 = phi i32 [ 0, %2 ], [ %7, %4 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %7 = add nuw nsw i32 %5, 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %8 = icmp eq i32 %7, 100

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  br i1 %8, label %9, label %4, !llvm.loop !3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


BLOCK AFTER MODIFICATION

4:                                                ; preds = %4, %2
  %5 = phi i32 [ 0, %2 ], [ %7, %4 ]
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  %7 = add nuw nsw i32 %5, 1
  %8 = icmp eq i32 %7, 100
  br i1 %8, label %9, label %4, !llvm.loop !3


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_0.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****
loop

4:                                                ; preds = %4, %2
  %5 = phi i32 [ 0, %2 ], [ %7, %4 ]
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  %7 = add nuw nsw i32 %5, 1
  %8 = icmp eq i32 %7, 100
  br i1 %8, label %9, label %4, !llvm.loop !3
: 
____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  br label %4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 5) #3
  br label %4


NEXTBLOCK

falseFinds


Instruction
  %5 = phi i32 [ 0, %2 ], [ %7, %4 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3

endofblockkilling:  %3 = call i8* @CAT_new(i64 noundef 5) #3
Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %7 = add nuw nsw i32 %5, 1

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %8 = icmp eq i32 %7, 100

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  br i1 %8, label %9, label %4, !llvm.loop !3

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


BLOCK AFTER MODIFICATION

4:                                                ; preds = %4, %2
  %5 = phi i32 [ 0, %2 ], [ %7, %4 ]
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  %7 = add nuw nsw i32 %5, 1
  %8 = icmp eq i32 %7, 100
  br i1 %8, label %9, label %4, !llvm.loop !3


NEXTBLOCK


Instruction
  %.lcssa.lcssa = phi i8* [ %.lcssa, %4 ]
phiNode
not falsefind

constantphifound  %.lcssa.lcssa = phi i8* [ %.lcssa, %4 ]  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  call void @CAT_set(i8* %.lcssa.lcssa, i64 10)

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa.lcssa, i64 10)


Instruction
  call void @CAT_set(i8* %.lcssa.lcssa, i64 0)

endofblockkilling:  call void @CAT_set(i8* %.lcssa.lcssa, i64 10)
Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa.lcssa, i64 0)


Instruction
  %10 = call i64 @CAT_variables() #3

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa.lcssa, i64 0)


Instruction
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa.lcssa, i64 0)


Instruction
  %12 = call i64 @CAT_cost() #3

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa.lcssa, i64 0)


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa.lcssa, i64 0)


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa.lcssa, i64 0)
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3

BLOCK AFTER MODIFICATION

9:                                                ; preds = %4
  call void @CAT_set(i8* %.lcssa, i64 10)
  call void @CAT_set(i8* %.lcssa, i64 0)
  %10 = call i64 @CAT_variables() #3
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)
  %12 = call i64 @CAT_cost() #3
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)
  ret i32 0


NEXTBLOCK

 found bad:   %3 = call i8* @CAT_new(i64 noundef 5) #3i64 3

falseFinds
  %3 = call i8* @CAT_new(i64 noundef 5) #3 REMOVED

  call void @CAT_set(i8* noundef %3, i64 noundef 3) #32->1

Instruction
  %5 = phi i32 [ 0, %2 ], [ %7, %4 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %7 = add nuw nsw i32 %5, 1

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  %8 = icmp eq i32 %7, 100

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  br i1 %8, label %9, label %4, !llvm.loop !3

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3


BLOCK AFTER MODIFICATION

4:                                                ; preds = %4, %2
  %5 = phi i32 [ 0, %2 ], [ %7, %4 ]
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  %7 = add nuw nsw i32 %5, 1
  %8 = icmp eq i32 %7, 100
  br i1 %8, label %9, label %4, !llvm.loop !3


NEXTBLOCK


Instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


Instruction
  br label %4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 5) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 5) #3
  br label %4


NEXTBLOCK


Instruction
  call void @CAT_set(i8* %.lcssa, i64 10)

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa, i64 10)


Instruction
  call void @CAT_set(i8* %.lcssa, i64 0)

endofblockkilling:  call void @CAT_set(i8* %.lcssa, i64 10)
Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa, i64 0)


Instruction
  %10 = call i64 @CAT_variables() #3

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa, i64 0)


Instruction
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa, i64 0)


Instruction
  %12 = call i64 @CAT_cost() #3

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa, i64 0)


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa, i64 0)


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %3, i64 noundef 3) #3
  %.lcssa = call i8* @CAT_new(i64 noundef 5) #3
  call void @CAT_set(i8* %.lcssa, i64 0)


BLOCK AFTER MODIFICATION

9:                                                ; preds = %4
  call void @CAT_set(i8* %.lcssa, i64 10)
  call void @CAT_set(i8* %.lcssa, i64 0)
  %10 = call i64 @CAT_variables() #3
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)
  %12 = call i64 @CAT_cost() #3
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)
  ret i32 0


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
Test passed!
make[1]: Leaving directory '/home/hwo2853/LLVM/H4/tests/test61'
