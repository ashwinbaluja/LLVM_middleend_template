make[1]: Entering directory '/home/hwo2853/LLVM/H4/tests/test50'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %2 = load i32, i32* %0, align 4, !tbaa !3

Constant after instruction


Instruction
  %3 = icmp sgt i32 %2, 500

Constant after instruction


Instruction
  br i1 %3, label %4, label %5

Constant after instruction


BLOCK AFTER MODIFICATION

  %2 = load i32, i32* %0, align 4, !tbaa !3
  %3 = icmp sgt i32 %2, 500
  br i1 %3, label %4, label %5


NEXTBLOCK


Instruction
  store i32 500, i32* %0, align 4, !tbaa !3

Constant after instruction


Instruction
  br label %5

Constant after instruction


BLOCK AFTER MODIFICATION

4:                                                ; preds = %1
  store i32 500, i32* %0, align 4, !tbaa !3
  br label %5


NEXTBLOCK


Instruction
  ret void

Constant after instruction


BLOCK AFTER MODIFICATION

5:                                                ; preds = %4, %1
  ret void


NEXTBLOCK
loopToBadConstants ****
loop

15:                                               ; preds = %.preheader, %15
  %16 = phi i8* [ %25, %15 ], [ %5, %.preheader ]
  %17 = phi i32 [ %26, %15 ], [ 0, %.preheader ]
  %18 = phi i32 [ %20, %15 ], [ %0, %.preheader ]
  %19 = icmp slt i32 %18, 500
  %20 = select i1 %19, i32 %18, i32 500
  %21 = call i64 @CAT_get(i8* noundef %16) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %16, i8* noundef %3, i8* noundef %4) #4
  %23 = call i64 @CAT_get(i8* noundef %16) #4
  %24 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %23)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %25 = call i8* @CAT_new(i64 noundef 1) #4
  %26 = add nuw nsw i32 %17, 1
  %27 = shl i32 %20, 1
  %28 = add i32 %27, 2
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %15, label %.loopexit, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = shl i32 %0, 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %8 = icmp sgt i32 %7, 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br i1 %8, label %.preheader, label %9

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = shl i32 %0, 1
  %7 = add i32 %6, 2
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %.preheader, label %9


NEXTBLOCK


Instruction
  br label %15

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

.preheader:                                       ; preds = %2
  br label %15


NEXTBLOCK


Instruction
  %10 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %10 = call i8* @CAT_new(i64 noundef 52) #4


Instruction
  call void @CAT_add(i8* noundef %10, i8* noundef %10, i8* noundef %10) #4

endofblockkilling:  %10 = call i8* @CAT_new(i64 noundef 52) #4
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_sub(i8* noundef %10, i8* noundef %10, i8* noundef %10) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %11 = call i64 @CAT_variables() #4

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %11)

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %13 = call i64 @CAT_cost() #4

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %13)

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

9:                                                ; preds = %.loopexit, %2
  %10 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %10, i64 104)
  call void @CAT_sub(i8* noundef %10, i8* noundef %10, i8* noundef %10) #4
  call void @CAT_set(i8* noundef %10, i64 noundef 42) #4
  %11 = call i64 @CAT_variables() #4
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %11)
  %13 = call i64 @CAT_cost() #4
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %13)
  ret i32 0


NEXTBLOCK

falseFinds
  %16 = phi i8* [ %25, %15 ], [ %5, %.preheader ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %16 = phi i8* [ %25, %15 ], [ %5, %.preheader ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %17 = phi i32 [ %26, %15 ], [ 0, %.preheader ]
phiNode
not falsefind

incomingValue:   %26 = add nuw nsw i32 %17, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %18 = phi i32 [ %20, %15 ], [ %0, %.preheader ]
phiNode
not falsefind

incomingValue:   %20 = select i1 %19, i32 %18, i32 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %19 = icmp slt i32 %18, 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %20 = select i1 %19, i32 %18, i32 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %16) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %16, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %23 = call i64 @CAT_get(i8* noundef %16) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %24 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %23)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %25 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %25 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %26 = add nuw nsw i32 %17, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %25 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = shl i32 %20, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %25 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %28 = add i32 %27, 2

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %25 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %29 = icmp slt i32 %26, %28

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %25 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %29, label %15, label %.loopexit, !llvm.loop !3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %25 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

15:                                               ; preds = %.preheader, %15
  %16 = phi i8* [ %25, %15 ], [ %5, %.preheader ]
  %17 = phi i32 [ %26, %15 ], [ 0, %.preheader ]
  %18 = phi i32 [ %20, %15 ], [ %0, %.preheader ]
  %19 = icmp slt i32 %18, 500
  %20 = select i1 %19, i32 %18, i32 500
  %21 = call i64 @CAT_get(i8* noundef %16) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %16, i8* noundef %3, i8* noundef %4) #4
  %23 = call i64 @CAT_get(i8* noundef %16) #4
  %24 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %23)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %25 = call i8* @CAT_new(i64 noundef 1) #4
  %26 = add nuw nsw i32 %17, 1
  %27 = shl i32 %20, 1
  %28 = add i32 %27, 2
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %15, label %.loopexit, !llvm.loop !3


NEXTBLOCK


Instruction
  br label %9

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %25 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit:                                        ; preds = %15
  br label %9


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_0.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %2 = load i32, i32* %0, align 4, !tbaa !3

Constant after instruction


Instruction
  %3 = icmp sgt i32 %2, 500

Constant after instruction


Instruction
  br i1 %3, label %4, label %5

Constant after instruction


BLOCK AFTER MODIFICATION

  %2 = load i32, i32* %0, align 4, !tbaa !3
  %3 = icmp sgt i32 %2, 500
  br i1 %3, label %4, label %5


NEXTBLOCK


Instruction
  store i32 500, i32* %0, align 4, !tbaa !3

Constant after instruction


Instruction
  br label %5

Constant after instruction


BLOCK AFTER MODIFICATION

4:                                                ; preds = %1
  store i32 500, i32* %0, align 4, !tbaa !3
  br label %5


NEXTBLOCK


Instruction
  ret void

Constant after instruction


BLOCK AFTER MODIFICATION

5:                                                ; preds = %4, %1
  ret void


NEXTBLOCK
loopToBadConstants ****
loop

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %14 = phi i8* [ %23, %.preheader ], [ %5, %.preheader.preheader ]
  %15 = phi i32 [ %24, %.preheader ], [ 0, %.preheader.preheader ]
  %16 = phi i32 [ %18, %.preheader ], [ %0, %.preheader.preheader ]
  %17 = icmp slt i32 %16, 500
  %18 = select i1 %17, i32 %16, i32 500
  %19 = call i64 @CAT_get(i8* noundef %14) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %14, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %14) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4
  %24 = add nuw nsw i32 %15, 1
  %25 = shl i32 %18, 1
  %26 = add i32 %25, 2
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %.preheader, label %.loopexit.loopexit, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = shl i32 %0, 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %8 = icmp sgt i32 %7, 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br i1 %8, label %.preheader.preheader, label %.loopexit

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = shl i32 %0, 1
  %7 = add i32 %6, 2
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %.preheader.preheader, label %.loopexit


NEXTBLOCK


Instruction
  br label %.preheader

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

.preheader.preheader:                             ; preds = %2
  br label %.preheader


NEXTBLOCK


Instruction
  %9 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %9 = call i8* @CAT_new(i64 noundef 52) #4


Instruction
  call void @CAT_set(i8* %9, i64 104)

endofblockkilling:  %9 = call i8* @CAT_new(i64 noundef 52) #4
Constant after instruction
  call void @CAT_set(i8* %9, i64 104)
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_sub(i8* noundef %9, i8* noundef %9, i8* noundef %9) #4

endofblockkilling:  call void @CAT_set(i8* %9, i64 104)
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


Instruction
  %10 = call i64 @CAT_variables() #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


Instruction
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


Instruction
  %12 = call i64 @CAT_cost() #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


BLOCK AFTER MODIFICATION

.loopexit:                                        ; preds = %.loopexit.loopexit, %2
  %9 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %9, i64 104)
  call void @CAT_set(i8* %9, i64 0)
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4
  %10 = call i64 @CAT_variables() #4
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)
  %12 = call i64 @CAT_cost() #4
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)
  ret i32 0


NEXTBLOCK

falseFinds
  %14 = phi i8* [ %23, %.preheader ], [ %5, %.preheader.preheader ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %14 = phi i8* [ %23, %.preheader ], [ %5, %.preheader.preheader ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %15 = phi i32 [ %24, %.preheader ], [ 0, %.preheader.preheader ]
phiNode
not falsefind

incomingValue:   %24 = add nuw nsw i32 %15, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %16 = phi i32 [ %18, %.preheader ], [ %0, %.preheader.preheader ]
phiNode
not falsefind

incomingValue:   %18 = select i1 %17, i32 %16, i32 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %17 = icmp slt i32 %16, 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %18 = select i1 %17, i32 %16, i32 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %14) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %14, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %14) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %23 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = add nuw nsw i32 %15, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %25 = shl i32 %18, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %26 = add i32 %25, 2

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp slt i32 %24, %26

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %.preheader, label %.loopexit.loopexit, !llvm.loop !3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %14 = phi i8* [ %23, %.preheader ], [ %5, %.preheader.preheader ]
  %15 = phi i32 [ %24, %.preheader ], [ 0, %.preheader.preheader ]
  %16 = phi i32 [ %18, %.preheader ], [ %0, %.preheader.preheader ]
  %17 = icmp slt i32 %16, 500
  %18 = select i1 %17, i32 %16, i32 500
  %19 = call i64 @CAT_get(i8* noundef %14) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %14, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %14) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4
  %24 = add nuw nsw i32 %15, 1
  %25 = shl i32 %18, 1
  %26 = add i32 %25, 2
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %.preheader, label %.loopexit.loopexit, !llvm.loop !3


NEXTBLOCK


Instruction
  br label %.loopexit

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit.loopexit:                               ; preds = %.preheader
  br label %.loopexit


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_1.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %2 = load i32, i32* %0, align 4, !tbaa !3

Constant after instruction


Instruction
  %3 = icmp sgt i32 %2, 500

Constant after instruction


Instruction
  br i1 %3, label %4, label %5

Constant after instruction


BLOCK AFTER MODIFICATION

  %2 = load i32, i32* %0, align 4, !tbaa !3
  %3 = icmp sgt i32 %2, 500
  br i1 %3, label %4, label %5


NEXTBLOCK


Instruction
  store i32 500, i32* %0, align 4, !tbaa !3

Constant after instruction


Instruction
  br label %5

Constant after instruction


BLOCK AFTER MODIFICATION

4:                                                ; preds = %1
  store i32 500, i32* %0, align 4, !tbaa !3
  br label %5


NEXTBLOCK


Instruction
  ret void

Constant after instruction


BLOCK AFTER MODIFICATION

5:                                                ; preds = %4, %1
  ret void


NEXTBLOCK
loopToBadConstants ****
loop

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %14 = phi i8* [ %23, %.preheader ], [ %5, %.preheader.preheader ]
  %15 = phi i32 [ %24, %.preheader ], [ 0, %.preheader.preheader ]
  %16 = phi i32 [ %18, %.preheader ], [ %0, %.preheader.preheader ]
  %17 = icmp slt i32 %16, 500
  %18 = select i1 %17, i32 %16, i32 500
  %19 = call i64 @CAT_get(i8* noundef %14) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %14, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %14) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4
  %24 = add nuw nsw i32 %15, 1
  %25 = shl i32 %18, 1
  %26 = add i32 %25, 2
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %.preheader, label %.loopexit.loopexit, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 ____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %6 = shl i32 %0, 1

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %7 = add i32 %6, 2

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %8 = icmp sgt i32 %7, 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  br i1 %8, label %.preheader.preheader, label %.loopexit

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %6 = shl i32 %0, 1
  %7 = add i32 %6, 2
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %.preheader.preheader, label %.loopexit


NEXTBLOCK


Instruction
  br label %.preheader

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


BLOCK AFTER MODIFICATION

.preheader.preheader:                             ; preds = %2
  br label %.preheader


NEXTBLOCK


Instruction
  %9 = call i8* @CAT_new(i64 noundef 52) #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %9 = call i8* @CAT_new(i64 noundef 52) #4


Instruction
  call void @CAT_set(i8* %9, i64 104)

endofblockkilling:  %9 = call i8* @CAT_new(i64 noundef 52) #4
Constant after instruction
  call void @CAT_set(i8* %9, i64 104)
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_set(i8* %9, i64 0)

endofblockkilling:  call void @CAT_set(i8* %9, i64 104)
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* %9, i64 0)


Instruction
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4

endofblockkilling:  call void @CAT_set(i8* %9, i64 0)
Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


Instruction
  %10 = call i64 @CAT_variables() #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


Instruction
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


Instruction
  %12 = call i64 @CAT_cost() #4

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


Instruction
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


Instruction
  ret i32 0

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #4
  %4 = call i8* @CAT_new(i64 noundef 2) #4
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4


BLOCK AFTER MODIFICATION

.loopexit:                                        ; preds = %.loopexit.loopexit, %2
  %9 = call i8* @CAT_new(i64 noundef 52) #4
  call void @CAT_set(i8* %9, i64 104)
  call void @CAT_set(i8* %9, i64 0)
  call void @CAT_set(i8* noundef %9, i64 noundef 42) #4
  %10 = call i64 @CAT_variables() #4
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %10)
  %12 = call i64 @CAT_cost() #4
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %12)
  ret i32 0


NEXTBLOCK

falseFinds
  %14 = phi i8* [ %23, %.preheader ], [ %5, %.preheader.preheader ]   %3 = call i8* @CAT_new(i64 noundef 40) #4   %4 = call i8* @CAT_new(i64 noundef 2) #4 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #43->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #42->1

Instruction
  %14 = phi i8* [ %23, %.preheader ], [ %5, %.preheader.preheader ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %15 = phi i32 [ %24, %.preheader ], [ 0, %.preheader.preheader ]
phiNode
not falsefind

incomingValue:   %24 = add nuw nsw i32 %15, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %16 = phi i32 [ %18, %.preheader ], [ %0, %.preheader.preheader ]
phiNode
not falsefind

incomingValue:   %18 = select i1 %17, i32 %16, i32 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %17 = icmp slt i32 %16, 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %18 = select i1 %17, i32 %16, i32 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %19 = call i64 @CAT_get(i8* noundef %14) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %19)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %14, i8* noundef %3, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %21 = call i64 @CAT_get(i8* noundef %14) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %21)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4


Instruction
  %23 = call i8* @CAT_new(i64 noundef 1) #4

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %24 = add nuw nsw i32 %15, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %25 = shl i32 %18, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %26 = add i32 %25, 2

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  %27 = icmp slt i32 %24, %26

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


Instruction
  br i1 %27, label %.preheader, label %.loopexit.loopexit, !llvm.loop !3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %14 = phi i8* [ %23, %.preheader ], [ %5, %.preheader.preheader ]
  %15 = phi i32 [ %24, %.preheader ], [ 0, %.preheader.preheader ]
  %16 = phi i32 [ %18, %.preheader ], [ %0, %.preheader.preheader ]
  %17 = icmp slt i32 %16, 500
  %18 = select i1 %17, i32 %16, i32 500
  %19 = call i64 @CAT_get(i8* noundef %14) #4
  %20 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %19)
  call void @CAT_add(i8* noundef %14, i8* noundef %3, i8* noundef %4) #4
  %21 = call i64 @CAT_get(i8* noundef %14) #4
  %22 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %21)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4
  %24 = add nuw nsw i32 %15, 1
  %25 = shl i32 %18, 1
  %26 = add i32 %25, 2
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %.preheader, label %.loopexit.loopexit, !llvm.loop !3


NEXTBLOCK


Instruction
  br label %.loopexit

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #4
  %23 = call i8* @CAT_new(i64 noundef 1) #4


BLOCK AFTER MODIFICATION

.loopexit.loopexit:                               ; preds = %.preheader
  br label %.loopexit


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
Test passed!
make[1]: Leaving directory '/home/hwo2853/LLVM/H4/tests/test50'
