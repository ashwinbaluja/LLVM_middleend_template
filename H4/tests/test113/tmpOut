make[1]: Entering directory '/home/hwo2853/LLVM/H4/tests/test113'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %2 = load i8*, i8** %0, align 8, !tbaa !3

Constant after instruction


Instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  %3 = load i8*, i8** %0, align 8, !tbaa !3

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  %4 = load i8*, i8** %0, align 8, !tbaa !3

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  call void @CAT_sub(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  ret void

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


BLOCK AFTER MODIFICATION

  %2 = load i8*, i8** %0, align 8, !tbaa !3
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4
  %3 = load i8*, i8** %0, align 8, !tbaa !3
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  %4 = load i8*, i8** %0, align 8, !tbaa !3
  call void @CAT_sub(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  ret void


NEXTBLOCK
loopToBadConstants ****


Instruction
  %3 = alloca i8*, align 8

Constant after instruction


Instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %5 = bitcast i8** %3 to i8*

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5

endofblockkilling:  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  store i8* %6, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  store i8** %3, i8*** %1, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %7 = call i64 @CAT_get(i8* noundef %4) #4

optimize Cat_get

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %7)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %9 = load i8*, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %10 = call i64 @CAT_get(i8* noundef %9) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %10)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %12 = icmp eq i32 %0, 0

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  br i1 %12, label %14, label %13

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4
i64 5

BLOCK AFTER MODIFICATION

  %3 = alloca i8*, align 8
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %5 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  store i8* %6, i8** %3, align 8, !tbaa !3
  store i8** %3, i8*** %1, align 8, !tbaa !3
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %8 = load i8*, i8** %3, align 8, !tbaa !3
  %9 = call i64 @CAT_get(i8* noundef %8) #4
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %9)
  %11 = icmp eq i32 %0, 0
  br i1 %11, label %13, label %12


NEXTBLOCK


Instruction
  %14 = call i64 @CAT_get(i8* noundef %4) #4

optimize Cat_get

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %14)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %16 = load i8*, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %17 = call i64 @CAT_get(i8* noundef %16) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %17)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5

endofblockkilling:  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  ret void

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4
i64 5

BLOCK AFTER MODIFICATION

13:                                               ; preds = %12, %2
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %15 = load i8*, i8** %3, align 8, !tbaa !3
  %16 = call i64 @CAT_get(i8* noundef %15) #4
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %16)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  ret void


NEXTBLOCK


Instruction
  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4

endofblockkilling:  %4 = call i8* @CAT_new(i64 noundef 5) #4
Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

endofblockkilling:  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4
Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  call void @CAT_sub(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  br label %13

Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


BLOCK AFTER MODIFICATION

12:                                               ; preds = %2
  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4
  call void @CAT_set(i8* %4, i64 10)
  call void @CAT_sub(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  br label %13


NEXTBLOCK


Instruction
  %3 = alloca i8*, align 8

Constant after instruction


Instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %5 = bitcast i8** %3 to i8*

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5

endofblockkilling:  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  store i8* %6, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  store i8** %3, i8*** %1, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %8 = load i8*, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %9 = call i64 @CAT_get(i8* noundef %8) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %9)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %11 = icmp eq i32 %0, 0

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  br i1 %11, label %13, label %12

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


BLOCK AFTER MODIFICATION

  %3 = alloca i8*, align 8
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %5 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  store i8* %6, i8** %3, align 8, !tbaa !3
  store i8** %3, i8*** %1, align 8, !tbaa !3
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %8 = load i8*, i8** %3, align 8, !tbaa !3
  %9 = call i64 @CAT_get(i8* noundef %8) #4
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %9)
  %11 = icmp eq i32 %0, 0
  br i1 %11, label %13, label %12


NEXTBLOCK
REMOVED

  %4 = call i8* @CAT_new(i64 noundef 5) #42->1

Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %15 = load i8*, i8** %3, align 8, !tbaa !3

Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %16 = call i64 @CAT_get(i8* noundef %15) #4

Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %16)

Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5

endofblockkilling:  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  ret void

Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


BLOCK AFTER MODIFICATION

13:                                               ; preds = %12, %2
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %15 = load i8*, i8** %3, align 8, !tbaa !3
  %16 = call i64 @CAT_get(i8* noundef %15) #4
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %16)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  ret void


NEXTBLOCK
loopToBadConstants ****


Instruction
  %3 = alloca i8**, align 8

Constant after instruction


Instruction
  %4 = bitcast i8*** %3 to i8*

Constant after instruction


Instruction
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4

endofblockkilling:  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4
Constant after instruction


Instruction
  call void @a_generic_C_function(i32 noundef %0, i8*** noundef nonnull %3)

Constant after instruction


Instruction
  %5 = call i64 @CAT_variables() #5

Constant after instruction


Instruction
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)

Constant after instruction


Instruction
  %7 = call i64 @CAT_cost() #5

Constant after instruction


Instruction
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)

Constant after instruction


Instruction
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4

endofblockkilling:  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4
Constant after instruction


Instruction
  ret i32 0

Constant after instruction


BLOCK AFTER MODIFICATION

  %3 = alloca i8**, align 8
  %4 = bitcast i8*** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4
  call void @a_generic_C_function(i32 noundef %0, i8*** noundef nonnull %3)
  %5 = call i64 @CAT_variables() #5
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)
  %7 = call i64 @CAT_cost() #5
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4
  ret i32 0


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_0.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %2 = load i8*, i8** %0, align 8, !tbaa !3

Constant after instruction


Instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  %3 = load i8*, i8** %0, align 8, !tbaa !3

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  %4 = load i8*, i8** %0, align 8, !tbaa !3

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  call void @CAT_sub(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  ret void

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


BLOCK AFTER MODIFICATION

  %2 = load i8*, i8** %0, align 8, !tbaa !3
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4
  %3 = load i8*, i8** %0, align 8, !tbaa !3
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  %4 = load i8*, i8** %0, align 8, !tbaa !3
  call void @CAT_sub(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  ret void


NEXTBLOCK
loopToBadConstants ****


Instruction
  %3 = alloca i8*, align 8

Constant after instruction


Instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %5 = bitcast i8** %3 to i8*

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5

endofblockkilling:  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  store i8* %6, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  store i8** %3, i8*** %1, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %8 = load i8*, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %9 = call i64 @CAT_get(i8* noundef %8) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %9)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %11 = icmp eq i32 %0, 0

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  br i1 %11, label %13, label %12

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


BLOCK AFTER MODIFICATION

  %3 = alloca i8*, align 8
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %5 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  store i8* %6, i8** %3, align 8, !tbaa !3
  store i8** %3, i8*** %1, align 8, !tbaa !3
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %8 = load i8*, i8** %3, align 8, !tbaa !3
  %9 = call i64 @CAT_get(i8* noundef %8) #4
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %9)
  %11 = icmp eq i32 %0, 0
  br i1 %11, label %13, label %12


NEXTBLOCK


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %15 = load i8*, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %16 = call i64 @CAT_get(i8* noundef %15) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %16)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5

endofblockkilling:  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  ret void

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


BLOCK AFTER MODIFICATION

13:                                               ; preds = %12, %2
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %15 = load i8*, i8** %3, align 8, !tbaa !3
  %16 = call i64 @CAT_get(i8* noundef %15) #4
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %16)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  ret void


NEXTBLOCK


Instruction
  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4

endofblockkilling:  %4 = call i8* @CAT_new(i64 noundef 5) #4
Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4


Instruction
  call void @CAT_set(i8* %4, i64 10)

endofblockkilling:  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4
Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  call void @CAT_set(i8* %4, i64 10)


Instruction
  call void @CAT_sub(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

endofblockkilling:  call void @CAT_set(i8* %4, i64 10)
Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  br label %13

Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4


BLOCK AFTER MODIFICATION

12:                                               ; preds = %2
  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4
  call void @CAT_set(i8* %4, i64 10)
  call void @CAT_set(i8* %4, i64 0)
  br label %13


NEXTBLOCK
loopToBadConstants ****


Instruction
  %3 = alloca i8**, align 8

Constant after instruction


Instruction
  %4 = bitcast i8*** %3 to i8*

Constant after instruction


Instruction
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4

endofblockkilling:  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4
Constant after instruction


Instruction
  call void @a_generic_C_function(i32 noundef %0, i8*** noundef nonnull %3)

Constant after instruction


Instruction
  %5 = call i64 @CAT_variables() #5

Constant after instruction


Instruction
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)

Constant after instruction


Instruction
  %7 = call i64 @CAT_cost() #5

Constant after instruction


Instruction
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)

Constant after instruction


Instruction
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4

endofblockkilling:  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4
Constant after instruction


Instruction
  ret i32 0

Constant after instruction


BLOCK AFTER MODIFICATION

  %3 = alloca i8**, align 8
  %4 = bitcast i8*** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4
  call void @a_generic_C_function(i32 noundef %0, i8*** noundef nonnull %3)
  %5 = call i64 @CAT_variables() #5
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)
  %7 = call i64 @CAT_cost() #5
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4
  ret i32 0


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_1.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****


Instruction
  %2 = load i8*, i8** %0, align 8, !tbaa !3

Constant after instruction


Instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  %3 = load i8*, i8** %0, align 8, !tbaa !3

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  %4 = load i8*, i8** %0, align 8, !tbaa !3

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  call void @CAT_sub(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


Instruction
  ret void

Constant after instruction
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4


BLOCK AFTER MODIFICATION

  %2 = load i8*, i8** %0, align 8, !tbaa !3
  call void @CAT_set(i8* noundef %2, i64 noundef 5) #4
  %3 = load i8*, i8** %0, align 8, !tbaa !3
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #4
  %4 = load i8*, i8** %0, align 8, !tbaa !3
  call void @CAT_sub(i8* noundef %4, i8* noundef %4, i8* noundef %4) #4
  ret void


NEXTBLOCK
loopToBadConstants ****


Instruction
  %3 = alloca i8*, align 8

Constant after instruction


Instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %5 = bitcast i8** %3 to i8*

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5

endofblockkilling:  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4


Instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  store i8* %6, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  store i8** %3, i8*** %1, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %8 = load i8*, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %9 = call i64 @CAT_get(i8* noundef %8) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %9)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %11 = icmp eq i32 %0, 0

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  br i1 %11, label %13, label %12

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


BLOCK AFTER MODIFICATION

  %3 = alloca i8*, align 8
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %5 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  store i8* %6, i8** %3, align 8, !tbaa !3
  store i8** %3, i8*** %1, align 8, !tbaa !3
  %7 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %8 = load i8*, i8** %3, align 8, !tbaa !3
  %9 = call i64 @CAT_get(i8* noundef %8) #4
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %9)
  %11 = icmp eq i32 %0, 0
  br i1 %11, label %13, label %12


NEXTBLOCK


Instruction
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %15 = load i8*, i8** %3, align 8, !tbaa !3

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %16 = call i64 @CAT_get(i8* noundef %15) #4

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %16)

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5

endofblockkilling:  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


Instruction
  ret void

Constant after instruction
  %4 = call i8* @CAT_new(i64 noundef 5) #4
  %6 = call i8* @CAT_new(i64 noundef 3) #4


BLOCK AFTER MODIFICATION

13:                                               ; preds = %12, %2
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 5)
  %15 = load i8*, i8** %3, align 8, !tbaa !3
  %16 = call i64 @CAT_get(i8* noundef %15) #4
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %16)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  ret void


NEXTBLOCK


Instruction
  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4

endofblockkilling:  %4 = call i8* @CAT_new(i64 noundef 5) #4
Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4


Instruction
  call void @CAT_set(i8* %4, i64 10)

endofblockkilling:  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4
Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  call void @CAT_set(i8* %4, i64 10)


Instruction
  call void @CAT_set(i8* %4, i64 0)

endofblockkilling:  call void @CAT_set(i8* %4, i64 10)
Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  call void @CAT_set(i8* %4, i64 0)


Instruction
  br label %13

Constant after instruction
  %6 = call i8* @CAT_new(i64 noundef 3) #4
  call void @CAT_set(i8* %4, i64 0)


BLOCK AFTER MODIFICATION

12:                                               ; preds = %2
  call void @CAT_set(i8* noundef %4, i64 noundef 5) #4
  call void @CAT_set(i8* %4, i64 10)
  call void @CAT_set(i8* %4, i64 0)
  br label %13


NEXTBLOCK
loopToBadConstants ****


Instruction
  %3 = alloca i8**, align 8

Constant after instruction


Instruction
  %4 = bitcast i8*** %3 to i8*

Constant after instruction


Instruction
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4

endofblockkilling:  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4
Constant after instruction


Instruction
  call void @a_generic_C_function(i32 noundef %0, i8*** noundef nonnull %3)

Constant after instruction


Instruction
  %5 = call i64 @CAT_variables() #5

Constant after instruction


Instruction
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)

Constant after instruction


Instruction
  %7 = call i64 @CAT_cost() #5

Constant after instruction


Instruction
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)

Constant after instruction


Instruction
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4

endofblockkilling:  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4
Constant after instruction


Instruction
  ret i32 0

Constant after instruction


BLOCK AFTER MODIFICATION

  %3 = alloca i8**, align 8
  %4 = bitcast i8*** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4
  call void @a_generic_C_function(i32 noundef %0, i8*** noundef nonnull %3)
  %5 = call i64 @CAT_variables() #5
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %5)
  %7 = call i64 @CAT_cost() #5
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %7)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4
  ret i32 0


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
  Test failed because output  isn't correct
  Output differences can be found in "diff"
make[1]: *** [Makefile:43: check] Error 1
make[1]: Leaving directory '/home/hwo2853/LLVM/H4/tests/test113'
