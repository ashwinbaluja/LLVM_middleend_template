make[1]: Entering directory '/home/hwo2853/LLVM/H4/tests/test47'
timeout 10m ../misc/run_test.sh "--basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker" "program.bc" "program_optimized.bc" 0 0
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so program.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****
loop

12:                                               ; preds = %2, %12
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]
  %14 = phi i32 [ 0, %2 ], [ %20, %12 ]
  %15 = call i64 @CAT_get(i8* noundef %13) #3
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %15)
  call void @CAT_add(i8* noundef %13, i8* noundef %3, i8* noundef %4) #3
  %17 = call i64 @CAT_get(i8* noundef %13) #3
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %17)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #3
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3
  %20 = add nuw nsw i32 %14, 1
  %21 = icmp eq i32 %20, 500
  br i1 %21, label %6, label %12, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #3   %4 = call i8* @CAT_new(i64 noundef 2) #3 ____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  br label %12

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  br label %12


NEXTBLOCK

falseFinds
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]   %3 = call i8* @CAT_new(i64 noundef 40) #3   %4 = call i8* @CAT_new(i64 noundef 2) #3 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #33->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #32->1

Instruction
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %14 = phi i32 [ 0, %2 ], [ %20, %12 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %15 = call i64 @CAT_get(i8* noundef %13) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %15)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  call void @CAT_add(i8* noundef %13, i8* noundef %3, i8* noundef %4) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %17 = call i64 @CAT_get(i8* noundef %13) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %17)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %19 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %20 = add nuw nsw i32 %14, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %21 = icmp eq i32 %20, 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br i1 %21, label %6, label %12, !llvm.loop !3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

12:                                               ; preds = %2, %12
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]
  %14 = phi i32 [ 0, %2 ], [ %20, %12 ]
  %15 = call i64 @CAT_get(i8* noundef %13) #3
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %15)
  call void @CAT_add(i8* noundef %13, i8* noundef %3, i8* noundef %4) #3
  %17 = call i64 @CAT_get(i8* noundef %13) #3
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %17)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #3
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3
  %20 = add nuw nsw i32 %14, 1
  %21 = icmp eq i32 %20, 500
  br i1 %21, label %6, label %12, !llvm.loop !3


NEXTBLOCK


Instruction
  %7 = call i8* @CAT_new(i64 noundef 52) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %7 = call i8* @CAT_new(i64 noundef 52) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_add(i8* noundef %7, i8* noundef %7, i8* noundef %7) #3

endofblockkilling:  %7 = call i8* @CAT_new(i64 noundef 52) #3
Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_sub(i8* noundef %7, i8* noundef %7, i8* noundef %7) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3

Constant after instruction
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %8 = call i64 @CAT_variables() #3

Constant after instruction
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %8)

Constant after instruction
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %10 = call i64 @CAT_cost() #3

Constant after instruction
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %10)

Constant after instruction
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  ret i32 0

Constant after instruction
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

6:                                                ; preds = %12
  %7 = call i8* @CAT_new(i64 noundef 52) #3
  call void @CAT_set(i8* %7, i64 104)
  call void @CAT_sub(i8* noundef %7, i8* noundef %7, i8* noundef %7) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %8 = call i64 @CAT_variables() #3
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %8)
  %10 = call i64 @CAT_cost() #3
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %10)
  ret i32 0


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_0.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****
loop

12:                                               ; preds = %2, %12
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]
  %14 = phi i32 [ 0, %2 ], [ %20, %12 ]
  %15 = call i64 @CAT_get(i8* noundef %13) #3
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %15)
  call void @CAT_add(i8* noundef %13, i8* noundef %3, i8* noundef %4) #3
  %17 = call i64 @CAT_get(i8* noundef %13) #3
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %17)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #3
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3
  %20 = add nuw nsw i32 %14, 1
  %21 = icmp eq i32 %20, 500
  br i1 %21, label %6, label %12, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #3   %4 = call i8* @CAT_new(i64 noundef 2) #3 ____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  br label %12

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  br label %12


NEXTBLOCK

falseFinds
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]   %3 = call i8* @CAT_new(i64 noundef 40) #3   %4 = call i8* @CAT_new(i64 noundef 2) #3 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #33->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #32->1

Instruction
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %14 = phi i32 [ 0, %2 ], [ %20, %12 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %15 = call i64 @CAT_get(i8* noundef %13) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %15)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  call void @CAT_add(i8* noundef %13, i8* noundef %3, i8* noundef %4) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %17 = call i64 @CAT_get(i8* noundef %13) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %17)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %19 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %20 = add nuw nsw i32 %14, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %21 = icmp eq i32 %20, 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br i1 %21, label %6, label %12, !llvm.loop !3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

12:                                               ; preds = %2, %12
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]
  %14 = phi i32 [ 0, %2 ], [ %20, %12 ]
  %15 = call i64 @CAT_get(i8* noundef %13) #3
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %15)
  call void @CAT_add(i8* noundef %13, i8* noundef %3, i8* noundef %4) #3
  %17 = call i64 @CAT_get(i8* noundef %13) #3
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %17)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #3
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3
  %20 = add nuw nsw i32 %14, 1
  %21 = icmp eq i32 %20, 500
  br i1 %21, label %6, label %12, !llvm.loop !3


NEXTBLOCK


Instruction
  %7 = call i8* @CAT_new(i64 noundef 52) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %7 = call i8* @CAT_new(i64 noundef 52) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_set(i8* %7, i64 104)

endofblockkilling:  %7 = call i8* @CAT_new(i64 noundef 52) #3
Constant after instruction
  call void @CAT_set(i8* %7, i64 104)
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_sub(i8* noundef %7, i8* noundef %7, i8* noundef %7) #3

endofblockkilling:  call void @CAT_set(i8* %7, i64 104)
Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %8 = call i64 @CAT_variables() #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %8)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %10 = call i64 @CAT_cost() #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %10)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  ret i32 0

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

6:                                                ; preds = %12
  %7 = call i8* @CAT_new(i64 noundef 52) #3
  call void @CAT_set(i8* %7, i64 104)
  call void @CAT_set(i8* %7, i64 0)
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %8 = call i64 @CAT_variables() #3
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %8)
  %10 = call i64 @CAT_cost() #3
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %10)
  ret i32 0


NEXTBLOCK
####  The compiler modified the input bitcode: the fixed point isn't reached.
#### Running the CAT compiler
####   Command line =  opt --enable-new-pm=0 -load ~/CAT/lib/CAT.so output_code_iter_1.bc --basic-aa --globals-aa --cfl-steens-aa --tbaa --scev-aa --cfl-anders-aa -loops -loop-simplify -lcssa -domtree -scalar-evolution -assumption-cache-tracker -CAT -o program_optimized.bc
loopToBadConstants ****
loop

12:                                               ; preds = %2, %12
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]
  %14 = phi i32 [ 0, %2 ], [ %20, %12 ]
  %15 = call i64 @CAT_get(i8* noundef %13) #3
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %15)
  call void @CAT_add(i8* noundef %13, i8* noundef %3, i8* noundef %4) #3
  %17 = call i64 @CAT_get(i8* noundef %13) #3
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %17)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #3
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3
  %20 = add nuw nsw i32 %14, 1
  %21 = icmp eq i32 %20, 500
  br i1 %21, label %6, label %12, !llvm.loop !3
: 
  %3 = call i8* @CAT_new(i64 noundef 40) #3   %4 = call i8* @CAT_new(i64 noundef 2) #3 ____________________


Instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3


Instruction
  %4 = call i8* @CAT_new(i64 noundef 2) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3


Instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  br label %12

Constant after instruction
  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3


BLOCK AFTER MODIFICATION

  %3 = call i8* @CAT_new(i64 noundef 40) #3
  %4 = call i8* @CAT_new(i64 noundef 2) #3
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  br label %12


NEXTBLOCK

falseFinds
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]   %3 = call i8* @CAT_new(i64 noundef 40) #3   %4 = call i8* @CAT_new(i64 noundef 2) #3 REMOVED

  %3 = call i8* @CAT_new(i64 noundef 40) #33->2REMOVED

  %4 = call i8* @CAT_new(i64 noundef 2) #32->1

Instruction
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]
phiNode

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %14 = phi i32 [ 0, %2 ], [ %20, %12 ]
phiNode
not falsefind

incomingValue: i32 0

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %15 = call i64 @CAT_get(i8* noundef %13) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %15)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  call void @CAT_add(i8* noundef %13, i8* noundef %3, i8* noundef %4) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %17 = call i64 @CAT_get(i8* noundef %13) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %17)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3


Instruction
  %19 = call i8* @CAT_new(i64 noundef 1) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %20 = add nuw nsw i32 %14, 1

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %21 = icmp eq i32 %20, 500

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  br i1 %21, label %6, label %12, !llvm.loop !3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

12:                                               ; preds = %2, %12
  %13 = phi i8* [ %5, %2 ], [ %19, %12 ]
  %14 = phi i32 [ 0, %2 ], [ %20, %12 ]
  %15 = call i64 @CAT_get(i8* noundef %13) #3
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %15)
  call void @CAT_add(i8* noundef %13, i8* noundef %3, i8* noundef %4) #3
  %17 = call i64 @CAT_get(i8* noundef %13) #3
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 noundef %17)
  call void @CAT_add(i8* noundef %3, i8* noundef %3, i8* noundef %3) #3
  call void @CAT_add(i8* noundef %4, i8* noundef %4, i8* noundef %4) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3
  %20 = add nuw nsw i32 %14, 1
  %21 = icmp eq i32 %20, 500
  br i1 %21, label %6, label %12, !llvm.loop !3


NEXTBLOCK


Instruction
  %7 = call i8* @CAT_new(i64 noundef 52) #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %7 = call i8* @CAT_new(i64 noundef 52) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_set(i8* %7, i64 104)

endofblockkilling:  %7 = call i8* @CAT_new(i64 noundef 52) #3
Constant after instruction
  call void @CAT_set(i8* %7, i64 104)
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_set(i8* %7, i64 0)

endofblockkilling:  call void @CAT_set(i8* %7, i64 104)
Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* %7, i64 0)
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3

endofblockkilling:  call void @CAT_set(i8* %7, i64 0)
Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %8 = call i64 @CAT_variables() #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %8)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %10 = call i64 @CAT_cost() #3

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %10)

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


Instruction
  ret i32 0

Constant after instruction
  %5 = call i8* @CAT_new(i64 noundef 0) #3
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %19 = call i8* @CAT_new(i64 noundef 1) #3


BLOCK AFTER MODIFICATION

6:                                                ; preds = %12
  %7 = call i8* @CAT_new(i64 noundef 52) #3
  call void @CAT_set(i8* %7, i64 104)
  call void @CAT_set(i8* %7, i64 0)
  call void @CAT_set(i8* noundef %7, i64 noundef 42) #3
  %8 = call i64 @CAT_variables() #3
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 noundef %8)
  %10 = call i64 @CAT_cost() #3
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 noundef %10)
  ret i32 0


NEXTBLOCK
####  The compiler did not modify the input bitcode: the fixed point has been reached.
llvm-dis program_optimized.bc
clang -O2 -lm program_optimized.bc ../misc/CAT.o -o program_optimized
./program_optimized > program_optimized_output
../misc/check.sh "output/oracle.txt" "program_optimized_output"
Checking output/oracle.txt against program_optimized_output
Test passed!
make[1]: Leaving directory '/home/hwo2853/LLVM/H4/tests/test47'
